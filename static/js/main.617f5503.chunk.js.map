{"version":3,"sources":["pages/chapter1-1/index.tsx","pages/chapter1-2/index.tsx","pages/chapter10-1/Child.tsx","pages/chapter10-1/index.tsx","pages/chapter10-2/Child.tsx","pages/chapter10-2/index.tsx","pages/chapter11-1/useArray.ts","pages/chapter11-1/index.tsx","pages/chapter11-2/useQuery.ts","pages/chapter11-2/PageOne.tsx","pages/chapter11-2/PageTwo.tsx","pages/chapter11-2/index.tsx","pages/chapter2-1/index.tsx","pages/chapter2-2/ClassComponent.tsx","pages/chapter2-2/FunctionComponent.tsx","pages/chapter2-2/index.tsx","pages/chapter2-3/index.tsx","pages/chapter2-4/FunctionState.tsx","pages/chapter2-4/index.tsx","pages/chapter3-1/index.tsx","pages/chapter3-2/index.tsx","pages/chapter3-3/index.tsx","pages/chapter3-4/index.tsx","pages/chapter4-1/index.tsx","pages/chapter4-2/index.tsx","pages/chapter5_1/reducer.ts","pages/chapter5_1/index.tsx","pages/chapter5_2/reducer.ts","pages/chapter5_2/useThunkReducer.ts","pages/chapter5_2/index.tsx","pages/chapter6-1/ChildOne.tsx","pages/chapter6-1/ChildTwo.tsx","pages/chapter6-1/index.tsx","pages/chapter6_2/ChildOne.tsx","pages/chapter6_2/ChildTwo.tsx","pages/chapter6_2/reducer.ts","pages/chapter6_2/index.tsx","pages/chapter7-1/index.tsx","pages/chapter7-2/index.tsx","pages/chapter8-1/Child.tsx","pages/chapter8-1/index.tsx","pages/chapter8-2/MultipleTag.tsx","pages/chapter8-2/index.tsx","pages/chapter9-1/index.tsx","consts/menu.ts","utils/useSelectedMenu.ts","components/SideMunu.tsx","components/PageHeader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Typography","Chapter1_1","Text","Paragraph","level","Chapter1_2","href","target","rel","Child","props","addNum","useEffect","console","log","style","padding","border","onClick","Chapter10_1","useState","num","setNum","refresh","setRefresh","useCallback","React","memo","Chapter10_2","useArray","val","value","setValue","clear","removeIndex","index","state","temp","splice","add","thing","push","Chapter11_1","name","age","marginRight","Math","round","random","marginBottom","map","person","color","useQuery","dataList","setDataList","loading","setLoading","mutate","setTimeout","key","ceil","gender","PageOne","dataSource","Column","dataIndex","title","PageTwo","TabPane","Tabs","Chapter11_2","defaultActiveKey","tab","Chapter2_1","count","setCount","code","ClassComponent","number","handleClick","setState","this","className","Component","FunctionComponent","Chapter2_2","Chapter2_3","FunctionState","alert","callback","setCallback","Chapter2_4","Chapter3_1","doubleNum","setDoubleNum","Chapter3_2","timer","setInterval","clearInterval","Chapter3_3","Chapter3_4","setDataSource","Chapter4_1","useLayoutEffect","Chapter4_2","pre","Date","now","undoReducer","action","past","present","future","newPresent","type","length","previous","slice","next","newFuture","Chapter5_1","useReducer","dispatch","canUndo","canRedo","undo","redo","set","reset","marginTop","disabled","fetchDataReducer","data","thunkDispatch","getState","Chapter5_2","reducer","defaultState","newDispatch","useThunkReducer","ChildOne","context","useContext","Context","ChildTwo","createContext","Chapter6_1","Provider","Chapter6_2","Chapter7_1","timer_1","num_1","setNum_1","num_2","setNum_2","ref","useRef","current","Chapter7_2","forwardRef","Chapter8_1","createRef","focus","MultipleTag","initialValue","onChange","array","setArray","useImperativeHandle","addTag","params","tmp","forEach","item","find","id","setTag","width","display","justifyContent","alignItems","minHeight","closable","onClose","newArray","filter","deleteTag","label","Chapter8_2","options","placeholder","marginLeft","Chapter9_1","menu","children","path","component","multipleNum","useMemo","i","floor","useSelectedMenu","useImmer","selectedKeys","openKeys","pathname","useLocation","child","SubMenu","Menu","SideMenu","height","mode","Item","to","PageHeader","Sider","Layout","Header","Content","Footer","App","collapsed","setCollapsed","collapsible","onCollapse","overflow","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRASQA,EAA2BC,IAA3BD,MAsBOE,GAtBoBD,IAApBE,KAAoBF,IAAdG,UAEF,WAEjB,OACE,eAAC,IAAD,WACE,cAACJ,EAAD,CAAOK,MAAO,EAAd,+HACA,+BACE,+DACA,+DACA,6DAGF,cAACL,EAAD,CAAOK,MAAO,EAAd,4DACA,+BACE,2QACA,gRCpBAL,EAA2BC,IAA3BD,MAAaI,GAAcH,IAApBE,KAAoBF,IAAdG,WAmBNE,EAjBI,WAEjB,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOD,MAAO,EAAd,sDACA,cAAC,EAAD,oaAKA,eAAC,EAAD,sGACyB,mBAAGE,KAAK,0EAA0EC,OAAO,SAASC,IAAI,aAAtG,6C,QCMhBC,MAff,SAAeC,GACb,IAAQC,EAAWD,EAAXC,OAMR,OAJAC,qBAAU,WACRC,QAAQC,IAAI,gDACX,CAACH,IAGF,sBAAKI,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,IAAD,CAAQC,QAASP,EAAjB,8BCTEZ,EAAqBC,IAArBD,MAAOI,EAAcH,IAAdG,UAmCAgB,MAjCf,WACE,MAAsBC,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KAMMb,EAASc,uBAAY,WACzBH,GAAO,SAAAD,GAAG,OAAIA,EAAM,OACnB,IAEH,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOjB,MAAO,EAAd,2CACA,cAAC,EAAD,mWAGA,cAAC,EAAD,CAAOA,MAAO,EAAd,0BACA,sBAAKW,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,EAAD,6VAIA,kDAAWI,KACX,cAAC,IAAD,CAAQH,QAAS,kBAAMM,GAAYD,IAAnC,0BACA,cAAC,EAAD,CAAOZ,OAAQA,WCjBRF,EAbDiB,IAAMC,MAAK,SAACjB,GACxB,IAAQC,EAAWD,EAAXC,OAIR,OAFAE,QAAQC,IAAI,oDAGV,sBAAKC,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,IAAD,CAAQC,QAASP,EAAjB,gCCPEZ,EAAqBC,IAArBD,MAAOI,EAAcH,IAAdG,UAoCAyB,MAlCf,WACE,MAAsBR,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KAMMb,EAASc,uBAAY,WACzBH,GAAO,SAAAD,GAAG,OAAIA,EAAM,OACnB,IAEH,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOjB,MAAO,EAAd,2CACA,cAAC,EAAD,kWAGA,cAAC,EAAD,CAAOA,MAAO,EAAd,0BACA,sBAAKW,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,EAAD,k4BAKA,kDAAWI,KACX,cAAC,IAAD,CAAQH,QAAS,kBAAMM,GAAYD,IAAnC,0BACA,cAAC,EAAD,CAAOZ,OAAQA,W,QCCRkB,EAjCE,SAAIC,GACnB,MAA0BV,mBAASU,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,MAAO,CACLD,QACAE,MAvBYR,uBAAY,WACxBO,EAAS,MACR,IAsBDE,YAnBkBT,uBAAY,SAACU,GAC/BH,GAAS,SAAAI,GACP,IAAMC,EAAI,YAAOD,GAEjB,OADAC,EAAKC,OAAOH,EAAO,GACZE,OAER,IAcDE,IAXUd,uBAAY,SAACe,GACvBR,GAAS,SAAAI,GACP,IAAMC,EAAI,YAAOD,GAEjB,OADAC,EAAKI,KAAKD,GACHH,OAER,MCtBGtC,EAAqBC,IAArBD,MAAOI,EAAcH,IAAdG,UAwCAuC,MAtCf,WACE,IAIA,EAA2Cb,EAJM,CAC/C,CAAEc,KAAM,eAAMC,IAAK,IACnB,CAAED,KAAM,eAAMC,IAAK,MAEbb,EAAR,EAAQA,MAAOE,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,YAAaK,EAAnC,EAAmCA,IAEnC,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOnC,MAAO,EAAd,mEACA,cAAC,EAAD,mXAIA,cAAC,EAAD,CAAOA,MAAO,EAAd,8CACA,cAAC,IAAD,CACEW,MAAO,CAAE8B,YAAa,QACtB3B,QAAS,kBAAMqB,EAAI,CAAEI,KAAM,eAAMC,IAAK,EAAIE,KAAKC,MAAM,GAAAD,KAAKE,aAF5D,0BAMA,cAAC,IAAD,CAAQjC,MAAO,CAAE8B,YAAa,QAAU3B,QAAS,kBAAMgB,EAAY,IAAnE,sCAGA,cAAC,IAAD,CAAQnB,MAAO,CAAEkC,aAAc,QAAU/B,QAAS,kBAAMe,KAAxD,0BAGCF,EAAMmB,KAAI,SAACC,EAAQhB,GAAT,OACT,sBAAKpB,MAAO,CAAEkC,aAAc,QAA5B,UACE,sBAAMlC,MAAO,CAAEqC,MAAO,MAAOP,YAAa,QAA1C,SAAqDV,IACrD,+BAAOgB,EAAOR,OACd,+BAAOQ,EAAOP,gB,kBCFTS,EAhCE,WACf,MAAgCjC,mBAAqB,IAArD,mBAAOkC,EAAP,KAAiBC,EAAjB,KACA,EAA8BnC,oBAAkB,GAAhD,mBAAOoC,EAAP,KAAgBC,EAAhB,KAsBA,MAAO,CACLH,WACAE,UACAE,OAtBajC,uBAAY,WAEzBgC,GAAW,GACXE,YAAW,WACTJ,EAAY,CACV,CAACK,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,UAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,YAElEL,GAAW,KACV,OACF,IAWDxB,MARYR,uBAAY,WACxB8B,EAAY,MACX,MCNUQ,MAff,WACE,MAA2CV,IAApCC,EAAP,EAAOA,SAAUE,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,OAAQzB,EAAlC,EAAkCA,MAClC,OACE,gCACE,cAAC,IAAD,CAAQf,QAASwC,EAAjB,sCACA,cAAC,IAAD,CAAQxC,QAASe,EAAjB,sCACA,eAAC,IAAD,CAAO+B,WAAYV,EAAUE,QAASA,EAAtC,UACE,cAAC,IAAMS,OAAP,CAAcC,UAAU,OAAOC,MAAM,iBACrC,cAAC,IAAMF,OAAP,CAAcC,UAAU,MAAMC,MAAM,iBACpC,cAAC,IAAMF,OAAP,CAAcC,UAAU,SAASC,MAAM,wBCMhCC,MAff,WACE,MAA2Cf,IAApCC,EAAP,EAAOA,SAAUE,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,OAAQzB,EAAlC,EAAkCA,MAClC,OACE,gCACE,cAAC,IAAD,CAAQf,QAASwC,EAAjB,sCACA,cAAC,IAAD,CAAQxC,QAASe,EAAjB,sCACA,eAAC,IAAD,CAAO+B,WAAYV,EAAUE,QAASA,EAAtC,UACE,cAAC,IAAMS,OAAP,CAAcC,UAAU,OAAOC,MAAM,iBACrC,cAAC,IAAMF,OAAP,CAAcC,UAAU,MAAMC,MAAM,iBACpC,cAAC,IAAMF,OAAP,CAAcC,UAAU,SAASC,MAAM,wBCRvCpE,EAAqBC,IAArBD,MAAOI,EAAcH,IAAdG,UACPkE,EAAYC,IAAZD,QAuBOE,MArBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOnE,MAAO,EAAd,uDACA,cAAC,EAAD,wpBAIA,cAAC,EAAD,CAAOA,MAAO,EAAd,8CACA,eAAC,IAAD,CAAMoE,iBAAiB,IAAvB,UACE,cAACH,EAAD,CAASI,IAAI,gBAAb,SACE,cAAC,EAAD,KADqB,KAGvB,cAACJ,EAAD,CAASI,IAAI,gBAAb,SACE,cAAC,EAAD,KADqB,YCjBvB1E,EAA2BC,IAA3BD,MAAOG,EAAoBF,IAApBE,KAAMC,EAAcH,IAAdG,UA6BNuE,EA3BI,WAEjB,MAA0BtD,mBAAS,GAAnC,mBAAOuD,EAAP,KAAcC,EAAd,KAEA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOxE,MAAO,EAAd,oDACA,eAAC,EAAD,WACE,cAAC,EAAD,CAAMyE,MAAI,EAAV,2DAAgE,OAElE,cAAC,EAAD,8FACA,+BACE,4GACA,kPAGA,4UAIF,cAAC,EAAD,CAAOzE,MAAO,EAAd,0BACA,+DAASuE,KACT,cAAC,IAAD,CAAQzD,QAAS,kBAAM0D,EAASD,EAAQ,IAAxC,0C,oCCxBeG,E,4MACnB1C,MAAQ,CACN2C,OAAQ,G,EAGVC,YAAc,WACZ,EAAKC,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,QAC5B,EAAKE,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,QAC5B,EAAKE,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,QAC5BpB,YAAW,WACT,EAAKsB,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,QAC5B,EAAKE,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,QAC5B,EAAKE,SAAS,CACZF,OAAQ,EAAK3C,MAAM2C,OAAS,IAE9BlE,QAAQC,IAAI,IAAK,EAAKsB,MAAM2C,UAC3B,K,4CAGL,WAAU,IAAD,OACP,OACE,gCACE,mDAAOG,KAAK9C,MAAM2C,UAClB,cAAC,IAAD,CAAQ7D,QAASgE,KAAKF,YAAaG,UAAU,aAA7C,0BACA,cAAC,IAAD,CAAQjE,QAAS,kBAAM,EAAK+D,SAAS,CAACF,OAAQ,KAAKI,UAAU,aAA7D,iC,GAvCoCzD,IAAM0D,WC4BnCC,EA5BW,WACxB,MAAsBjE,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAkBA,OACE,gCACE,mDAAOD,KACP,cAAC,IAAD,CAAQH,QAnBQ,WAClBI,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBsC,YAAW,WACTrC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,OAMa8D,UAAU,aAAxC,0BACA,cAAC,IAAD,CAAQjE,QAAS,kBAAMI,EAAO,IAAI6D,UAAU,aAA5C,8BCrBEpF,EAA2BC,IAA3BD,MAAaI,GAAcH,IAApBE,KAAoBF,IAAdG,WAyCNmF,EAvCI,WACjB,MAAsBlE,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,GAArC,6BAWA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOhB,MAAO,EAAd,4EAEA,cAAC,EAAD,CAAOA,MAAO,EAAd,yFACA,cAAC,EAAD,wUACA,mDAAOiB,KACP,cAAC,IAAD,CAAQH,QAhBG,WACbI,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,GACjBC,EAAOD,EAAM,GACbR,QAAQC,IAAI,IAAKO,IAUU8D,UAAU,aAAnC,0BACA,cAAC,IAAD,CAAQjE,QAAS,kBAAMI,EAAO,IAAI6D,UAAU,aAA5C,0BAEA,cAAC,EAAD,CAAO/E,MAAO,EAAd,+CACA,cAAC,EAAD,mSACA,cAAC,EAAD,IAEA,cAAC,EAAD,CAAOA,MAAO,EAAd,qDACA,cAAC,EAAD,yQACA,cAAC,EAAD,IAEA,cAAC,EAAD,CAAOA,MAAO,EAAd,4EACA,cAAC,EAAD,iQACA,cAAC,EAAD,qQACA,cAAC,EAAD,qQCtCEL,EAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAiCNoF,GA/BI,WACjB,MAAsBnE,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAmBA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOlB,MAAO,EAAd,0DACA,cAAC,EAAD,CAAOA,MAAO,EAAd,mHACA,cAAC,GAAD,gRACA,mDAAOiB,KACP,cAAC,IAAD,CAAQH,QAvBQ,WAClBI,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,GACjBC,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,GACjBC,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,GACjBsC,YAAW,WACTrC,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,GACjBC,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,GACjBC,GAAO,SAAAD,GAAG,OAAIA,EAAM,KACpBR,QAAQC,IAAI,IAAKO,OAUjB,8BC7BEtB,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAcNqF,GAZO,WACpB,MAAgCpE,oBAAS,kBAAM,WAAOqE,MAAM,YAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOvF,MAAO,EAAd,oEACA,cAAC,GAAD,qPACA,cAAC,IAAD,CAAQc,QAAS,WAAOyE,GAAY,kBAAM,WAAOF,MAAM,eAAcN,UAAU,aAA/E,sCACA,cAAC,IAAD,CAAQjE,QAASwE,EAAUP,UAAU,aAArC,0CCPEpF,GAA2BC,IAA3BD,MAAOG,GAAoBF,IAApBE,KAAMC,GAAcH,IAAdG,UAqCNyF,GAnCI,WACjB,MAAgCxE,oBAAS,WACvCqE,MAAM,WADR,mBAAiBE,GAAjB,WAKA,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOvF,MAAO,EAAd,oDACA,eAAC,GAAD,wFAEE,cAAC,GAAD,CAAMyE,MAAI,EAAV,SACG,yEAGL,cAAC,GAAD,6RAGA,cAAC,IAAD,CACEM,UAAU,aACVjE,QAAS,WACPyE,GAAY,WACVF,MAAM,cAJZ,sCAWA,cAAC,GAAD,QChCE1F,GAA2BC,IAA3BD,MAAOG,GAAoBF,IAApBE,KAAMC,GAAcH,IAAdG,UAuCN0F,GArCI,WACjB,MAAsBzE,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,mBAAiB,GAAnD,mBAAO0E,EAAP,KAAkBC,EAAlB,KAOA,OALAnF,qBAAU,WACRC,QAAQC,IAAI,wCACZiF,EAAmB,EAAN1E,KACZ,CAACA,IAGF,eAAC,IAAD,WACE,cAAC,GAAD,CAAOjB,MAAO,EAAd,qDACA,cAAC,GAAD,CAAMyE,MAAI,EAAV,gGAKA,cAAC,GAAD,CAAOzE,MAAO,EAAd,0BACA,cAAC,GAAD,gVAGA,sCAASiB,KACT,4CAAeyE,KACf,cAAC,IAAD,CAAQ5E,QAAS,kBAAMI,EAAOD,EAAM,IAAI8D,UAAU,aAAlD,6BAGA,cAAC,GAAD,UACE,+BACE,8IACA,0JACA,mKClCFpF,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAqCN6F,OAnCf,WACE,MAAsB5E,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KAYA,OAVAV,qBAAU,WACR,IAAMqF,EAAQC,aAAY,WACxB5E,EAAOD,EAAM,KACZ,KAEH,OADAR,QAAQC,IAAI,sBACL,WACLqF,cAAcF,GACdpF,QAAQC,IAAI,yBAEb,CAACO,IAEF,eAAC,IAAD,WACE,cAAC,GAAD,CAAOjB,MAAO,EAAd,qDACA,cAAC,GAAD,UACE,+BACE,oLACA,2PACA,2KAGJ,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,GAAD,guBAMA,mDAAOiB,SC/BLtB,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAyCNiG,OAvCf,WACE,MAAsBhF,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KAcA,OARAV,qBAAU,WACR,IAAMqF,EAAQC,aAAY,WACxBrF,QAAQC,IAAI,OAAQO,KACnB,KACH,OAAO,WACL8E,cAAcF,MAEf,IAED,eAAC,IAAD,WACE,cAAC,GAAD,CAAO7F,MAAO,EAAd,6DACA,cAAC,GAAD,CAAOA,MAAO,EAAd,2FACA,cAAC,GAAD,ieAKA,mDAAOiB,KACP,cAAC,IAAD,CAAQH,QAtBG,WACbI,EAAOD,EAAM,IAqBX,0BACA,cAAC,GAAD,CAAOjB,MAAO,EAAd,2CACA,cAAC,GAAD,0NAGA,cAAC,GAAD,k2BChCEL,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WA0CNkG,OAxCf,WACE,IAEA,EAA8BjF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,mBAA+B,IAArE,mBACA,GADA,UACoCA,mBAAc,KAAlD,mBAAO4C,EAAP,KAAmBsC,EAAnB,KAYA,OAVA1F,qBAAU,WACRC,QAAQC,IAAI,8CACZwF,EAAc,CACZ,CAAC1C,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,UAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,cAEjE,CAdgB,IAiBjB,eAAC,IAAD,WACE,cAAC,GAAD,CAAO1D,MAAO,EAAd,8DACA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,IAAD,CAAQc,QAAS,kBAAMM,GAAYD,IAAnC,sCACA,eAAC,IAAD,CAAOyC,WAAYA,EAAnB,UACE,cAAC,IAAMC,OAAP,CAAcC,UAAU,OAAOC,MAAM,iBACrC,cAAC,IAAMF,OAAP,CAAcC,UAAU,MAAMC,MAAM,iBACpC,cAAC,IAAMF,OAAP,CAAcC,UAAU,SAASC,MAAM,oBAEzC,eAAC,GAAD,6HACE,+BACE,gLACA,2JACA,mLACA,yJACA,6OCnCFpE,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAqCNoG,OAnCf,WACE,MAAsBnF,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KAkBA,OAhBAV,qBAAU,WACRC,QAAQC,IAAI,0CACX,CAACO,IAEJT,qBAAU,WACRC,QAAQC,IAAI,0CACX,CAACO,IAEJmF,2BAAgB,WACd3F,QAAQC,IAAI,+BACX,CAACO,IAOF,eAAC,IAAD,WACE,cAAC,GAAD,CAAOjB,MAAO,EAAd,8DACA,cAAC,GAAD,4MAGA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,mDAAOiB,KACP,cAAC,IAAD,CAAQH,QAZQ,WAClBI,EAAOD,EAAM,IAWX,0BACA,cAAC,GAAD,sNC9BEtB,GAA2BC,IAA3BD,MAAaI,IAAcH,IAApBE,KAAoBF,IAAdG,WAiDNsG,OA/Cf,WAEE,MAAsBrF,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACAV,qBAAU,WACRC,QAAQC,IAAR,4BAAiCO,IAGjC,IADA,IAAMqF,EAAMC,KAAKC,MACXD,KAAKC,MAAQF,EAAM,MAGb,IAARrF,GACAC,EAAO,GAAqB,IAAhBwB,KAAKE,YAEpB,CAAC3B,IAEJ,MAA0BD,mBAAS,GAAnC,mBAAOuD,EAAP,KAAcC,EAAd,KAaA,OAZA4B,2BAAgB,WACd3F,QAAQC,IAAR,kCAAuC6D,IAGvC,IADA,IAAM+B,EAAMC,KAAKC,MACXD,KAAKC,MAAQF,EAAM,MAEX,IAAV/B,GACAC,EAAS,GAAqB,IAAhB9B,KAAKE,YAEtB,CAAC2B,IAIF,eAAC,IAAD,WACE,cAAC,GAAD,CAAOvE,MAAO,EAAd,8DACA,cAAC,GAAD,0XAGA,cAAC,GAAD,CAAOA,MAAO,EAAd,sDACA,sDAAUiB,KACV,cAAC,IAAD,CAAQH,QAAS,kBAAMI,EAAO,IAA9B,0BACA,cAAC,GAAD,uSAGA,cAAC,GAAD,CAAOlB,MAAO,EAAd,4DACA,wDAAYuE,KACZ,cAAC,IAAD,CAAQzD,QAAS,kBAAM0D,EAAS,IAAhC,8BCnCOiC,GAAc,SAAIzE,EAAiB0E,GAC9C,IAAQC,EAA0B3E,EAA1B2E,KAAMC,EAAoB5E,EAApB4E,QAASC,EAAW7E,EAAX6E,OAChBC,EAAcJ,EAAdI,WACP,OAAQJ,EAAOK,MACb,IAAK,OACH,GAAoB,IAAhBJ,EAAKK,OAAc,OAAOhF,EAC9B,IAAMiF,EAAWN,EAAKA,EAAKK,OAAS,GAEpC,MAAO,CACLL,KAFcA,EAAKO,MAAM,EAAGP,EAAKK,OAAS,GAG1CJ,QAASK,EACTJ,OAAO,CAAED,GAAH,mBAAeC,KAEzB,IAAK,OACH,GAAsB,IAAlBA,EAAOG,OAAc,OAAOhF,EAChC,IAAMmF,EAAON,EAAO,GACdO,EAAYP,EAAOK,MAAM,GAC/B,MAAO,CACLP,KAAK,GAAD,mBAAMA,GAAN,CAAYC,IAChBA,QAASO,EACTN,OAAQO,GAEZ,IAAK,MACH,OAAIN,IAAeF,EAAgB5E,EAC5B,CACL2E,KAAK,GAAD,mBAAMA,GAAN,CAAYC,IAChBA,QAASE,EACTD,OAAQ,IAEZ,IAAK,QACH,MAAO,CACLF,KAAM,GACNC,QAASE,EACTD,OAAQ,IAEZ,QACE,OAAO7E,IC5CLrC,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UA4EAsH,OA1Ef,WACE,MAA0BC,qBAAWb,GAAa,CAChDE,KAAM,GACNC,QAAS,EACTC,OAAQ,KAHV,mBAAO7E,EAAP,KAAcuF,EAAd,KAMMX,EAAU5E,EAAM4E,QAEhBY,EAAgC,IAAtBxF,EAAM2E,KAAKK,OACrBS,EAAkC,IAAxBzF,EAAM6E,OAAOG,OAGvBU,EAAOrG,uBAAY,WAAOkG,EAAS,CAACR,KAAM,WAAW,IAGrDY,EAAOtG,uBAAY,WAAOkG,EAAS,CAACR,KAAM,WAAW,IAGrDa,EAAMvG,uBAAY,SAACyF,GAAwBS,EAAS,CAACR,KAAM,MAAOD,WAAYA,MAAe,IAG7Fe,EAAQxG,uBAAY,WAAOkG,EAAS,CAACR,KAAM,QAASD,WAAY,MAAM,IAG5E,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAO9G,MAAO,EAAd,kGACA,cAAC,GAAD,CAAOA,MAAO,EAAd,sCACA,cAAC,GAAD,6nBAKA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,2DAAU4G,KACV,sBAAKjG,MAAO,CAAEmH,UAAW,IAAzB,UACE,cAAC,IAAD,CAAQhH,QAAS4G,EAAMK,UAAWP,EAAS7G,MAAO,CAAE8B,YAAa,IAAjE,0BAGA,cAAC,IAAD,CAAQ3B,QAAS6G,EAAMI,UAAWN,EAAS9G,MAAO,CAAE8B,YAAa,IAAjE,sCAGA,cAAC,IAAD,CACE3B,QAAS,WACP8G,EAAIhB,EAAU,IAEhBjG,MAAO,CAAE8B,YAAa,IAJxB,0BAQA,cAAC,IAAD,CACE3B,QAAS,WACP8G,EAAIhB,EAAU,IAEhBjG,MAAO,CAAE8B,YAAa,IAJxB,0BAQA,cAAC,IAAD,CAAQ3B,QAAS+G,EAAjB,6BAEF,cAAC,GAAD,CAAO7H,MAAO,EAAd,0BACA,eAAC,GAAD,6WAGE,+BACE,+GACA,sI,UC9DGgI,GAAmB,SAAChG,EAAc0E,GAC7C,OAAQA,EAAOK,MACb,IAAK,QACH,OAAO,6BACF/E,GADL,IAEEoB,SAAS,IAEb,IAAK,UACH,MAAO,CACLA,SAAS,EACTQ,WAAY8C,EAAOuB,MAEvB,QACE,OAAOjG,ICpBPkG,GAAgB,SAAhBA,EAAiBX,EAAkCY,GAMvD,OAAO,SAACzB,GACgB,oBAAXA,EACTA,EAAOwB,EAAcX,EAAUY,GAAWA,GAE1CZ,EAASb,KCTP/G,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UA6CAqI,OA3Cf,WACE,MDW6B,SAACC,EAK9BC,GAEA,MAA0BhB,qBAAWe,EAASC,GAA9C,mBAAOtG,EAAP,KAAcuF,EAAd,KAEMgB,EAAcL,GAAcX,GADjB,kBAAMvF,KAEvB,MAAO,CAACA,EAAOuG,GCrBWC,CAAgBR,GAAkB,CAC1DpE,WAAY,GACZR,SAAS,IAFX,mBAAOpB,EAAP,KAAcuF,EAAd,KAKA,EAAgCvF,EAAxBoB,EAAR,EAAQA,QAASQ,EAAjB,EAAiBA,WAYjB,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAO5D,MAAO,EAAd,wDACA,cAAC,GAAD,yoBAKA,cAAC,GAAD,CAAOA,MAAO,EAAd,sCACA,cAAC,GAAD,giBAKA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,IAAD,CAAQc,QAzBQ,WAElByG,EAAS,CACPR,KAAM,QACNnD,WAAY,KAGd2D,GFOK,SAACA,GACNhE,YAAW,WACTgE,EAAS,CACPR,KAAM,UACNkB,KAAM,CACJ,CAACzE,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,UAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,QAChE,CAACF,IAAK,EAAGjB,KAAM,eAAMC,IAAKE,KAAKe,KAAoB,GAAff,KAAKE,UAAec,OAAQ,eAGnE,SEA6BqD,KAAK,UAAnC,0BACA,eAAC,IAAD,CAAOnD,WAAYA,EAAYR,QAASA,EAAxC,UACE,cAAC,IAAMS,OAAP,CAAcC,UAAU,OAAOC,MAAM,iBACrC,cAAC,IAAMF,OAAP,CAAcC,UAAU,MAAMC,MAAM,iBACpC,cAAC,IAAMF,OAAP,CAAcC,UAAU,SAASC,MAAM,wBC5BhC0E,OAZf,WACE,IAAMC,EAAUC,qBAAWC,IAE3B,OACE,sBAAKjI,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,qDACA,0FACA,sDAAU6H,EAAQzH,WCUT4H,OAhBf,WACE,IAAMH,EAAUC,qBAAWC,IAM3B,OACE,sBAAKjI,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,qDACA,0FACA,cAAC,IAAD,CAAQC,QARQ,WAClB4H,EAAQxH,OAAOwH,EAAQzH,IAAM,IAO3B,8BCXEtB,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UAEF6I,GAAUE,wBAGpB,CAAE7H,IAAK,EAAGC,OAAQ,eAyBN6H,OAvBf,WACE,MAAsB/H,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEA,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOlB,MAAO,EAAd,0CACA,cAAC,GAAD,oiBAIA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC4I,GAAQI,SAAT,CAAkBrH,MAAO,CAACV,MAAKC,UAA/B,SACE,sBAAKP,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,sDAAUI,KACV,cAAC,GAAD,IACA,cAAC,GAAD,aCLKwH,OAlBf,WACE,IAAMC,EAAUC,qBAAWC,IAQ3B,OACE,sBAAKjI,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,qDACA,sDAAU6H,EAAQ1G,MAAMf,OACxB,cAAC,IAAD,CAAQH,QAVG,WACb4H,EAAQnB,SAAS,CACfR,KAAM,SAQN,8BCKS8B,OAlBf,WACE,IAAMH,EAAUC,qBAAWC,IAQ3B,OACE,sBAAKjI,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,qDACA,sDAAU6H,EAAQ1G,MAAMf,OACxB,cAAC,IAAD,CAAQH,QAVM,WAChB4H,EAAQnB,SAAS,CACfR,KAAM,YAQN,8BCROsB,GAAU,SAACrG,EAAc0E,GACpC,OAAQA,EAAOK,MACb,IAAK,MACH,MAAO,CACL9F,IAAKe,EAAMf,IAAM,GAErB,IAAK,SACH,MAAO,CACLA,IAAKe,EAAMf,IAAM,GAErB,QACE,OAAOe,ICfLrC,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UAEF6I,GAAUE,wBAGpB,CAAE9G,MAAO,CAACf,IAAK,GAAIsG,SAAU,eAyBjB0B,OAvBf,WACE,MAA0B3B,qBAAWe,GAAS,CAAEpH,IAAK,IAArD,mBAAOe,EAAP,KAAcuF,EAAd,KAEA,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOvH,MAAO,EAAd,2EACA,cAAC,GAAD,oiBAIA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,GAAQgJ,SAAT,CAAkBrH,MAAO,CAACK,QAAOuF,YAAjC,SACE,sBAAK5G,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,sDAAUmB,EAAMf,OAChB,cAAC,GAAD,IACA,cAAC,GAAD,aC1BFtB,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UA2DAmJ,OAzDf,WACE,IACIC,EADJ,EAA0BnI,mBAAiB,GAA3C,mBAAOoI,EAAP,KAAcC,EAAd,KAEA7I,qBAAU,WACR2I,EAAUrD,aAAY,WACpBuD,GAAS,SAAApI,GAAG,OAAIA,EAAM,OACrB,OACF,IACHT,qBAAU,WACJ4I,EAAQ,KACV3I,QAAQC,IAAIyI,GACZpD,cAAcoD,MAEf,CAACC,IAEJ,MAA0BpI,mBAAiB,GAA3C,mBAAOsI,EAAP,KAAcC,EAAd,KACMC,EAAMC,mBAaZ,OAZAjJ,qBAAU,WACRgJ,EAAIE,QAAU5D,aAAY,WACxByD,GAAS,SAAAtI,GAAG,OAAIA,EAAM,OACrB,OACF,IACHT,qBAAU,WACJ8I,EAAQ,KACV7I,QAAQC,IAAI8I,EAAIE,SAChB3D,cAAcyD,EAAIE,YAEnB,CAACJ,IAGF,eAAC,IAAD,WACE,cAAC,GAAD,CAAOtJ,MAAO,EAAd,sCACA,cAAC,GAAD,gdAMA,cAAC,GAAD,CAAOA,MAAO,EAAd,+FACA,cAAC,GAAD,klBAMA,oDAAQoJ,KAER,cAAC,GAAD,CAAOpJ,MAAO,EAAd,6EACA,cAAC,GAAD,uOAIA,oDAAQsJ,SCtDN3J,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UAmCA4J,OAjCf,WACE,IAAMH,EAAMC,iBAAe,GAM3B,EAA8BzI,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KAMA,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOpB,MAAO,EAAd,sCACA,cAAC,GAAD,uaAIA,cAAC,GAAD,CAAOA,MAAO,EAAd,sCACA,cAAC,GAAD,2gBAKA,mDAAOwJ,EAAIE,WACX,cAAC,IAAD,CAAQ5I,QAzBA,WACV0I,EAAIE,QAAUF,EAAIE,QAAU,EAC5BjJ,QAAQC,IAAI,MAAO8I,IAuBK7I,MAAO,CAAC8B,YAAa,IAA3C,0BACA,cAAC,IAAD,CAAQ3B,QAnBQ,WAClBM,GAAYD,IAkBV,8B,UCnBSd,GAVDiB,IAAMsI,YAAW,SAACtJ,EAAOkJ,GAErC,OACE,sBAAK7I,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,KAAD,CAAO2I,IAAKA,UCJV7J,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UA8BA8J,OA5Bf,WACE,IAAML,EAAMlI,IAAMwI,YAOlB,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAO9J,MAAO,EAAd,gDACA,cAAC,GAAD,yMAGA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,GAAD,0kBAIA,sBAAKW,MAAO,CAAEC,QAAS,GAAIC,OAAQ,kBAAnC,UACE,oDACA,cAAC,IAAD,CAAQC,QAlBA,WACZL,QAAQC,IAAI8I,GACZA,EAAIE,QAAQK,SAgBgBpJ,MAAO,CAAEkC,aAAc,IAA/C,iDACA,cAAC,GAAD,CAAO2G,IAAKA,W,6BCqCLQ,GAxDKJ,sBAAW,SAACtJ,EAAyBkJ,GACvD,IAAQS,EAA2B3J,EAA3B2J,aAAcC,EAAa5J,EAAb4J,SACtB,EAA0BlJ,mBAAgBiJ,GAAgB,IAA1D,mBAAOE,EAAP,KAAcC,EAAd,KAuCA,OAVAC,8BAAoBb,GAAK,iBAAO,CAC9B7H,MAAOwI,EACPG,OAAQ,SAACC,IArBI,SAACA,GACd,IAAMC,EAAG,YAAOL,GAChBI,EAAOE,SAAQ,SAACC,GACCF,EAAIG,MAAK,SAACvI,GAAD,OAAWA,EAAMwI,KAAOF,EAAKE,OAEnDJ,EAAInI,KAAKqI,MAGbN,EAASI,GACD,OAARN,QAAQ,IAARA,KAAWM,GAaTF,CAAOC,IAETM,OAAQ,SAACN,IAXI,SAACA,GACdH,EAASG,GACD,OAARL,QAAQ,IAARA,KAAWK,GAUTM,CAAON,QAKT,qBAAK5J,MAAO,CAAEmK,MAAO,IAAKjK,OAAQ,iBAAkBkK,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,UAAW,IAAhI,SACKf,EAAMrH,KAAI,SAAC4H,GAAD,OACT,cAAC,KAAD,CACES,UAAQ,EAERC,QAAS,kBA1CD,SAACR,GACjB,IAAMS,EAAWlB,EAAMmB,QAAO,SAACZ,GAAD,OAAUA,EAAKE,KAAOA,KACpDR,EAASiB,GACD,OAARnB,QAAQ,IAARA,KAAWmB,GAuCYE,CAAUb,EAAKE,KAHhC,SAKGF,EAAKc,OAHDd,EAAKE,YCnDdjL,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UAET6D,GAAa,CACjB,CAAE4H,MAAO,eAAM7J,MAAO,GACtB,CAAE6J,MAAO,eAAM7J,MAAO,GACtB,CAAE6J,MAAO,eAAM7J,MAAO,GACtB,CAAE6J,MAAO,eAAM7J,MAAO,IAqCT8J,OAlCf,WACE,IAAMjC,EAAMC,mBAaZ,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOzJ,MAAO,EAAd,mDACA,cAAC,GAAD,wUAGA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,GAAD,mpBAKA,cAAC,KAAD,CAAQ0L,QAAS9H,GAAYsG,SAtBlB,SAACvI,EAAe+J,GAC7B,IAAMhK,EAAM,CAAE8J,MAAOE,EAAQF,MAAOZ,GAAIc,EAAQ/J,OAChD6H,EAAIE,QAAQY,OAAO,CAAC5I,KAoB6BiK,YAAY,yDAAYhL,MAAO,CAACmK,MAAO,OACtF,cAAC,IAAD,CAAQhK,QAjBG,WACb0I,EAAIE,QAAQmB,OAAO,CAAC,CAAEW,MAAO,eAAMZ,GAAI,MAgBZjK,MAAO,CAACiL,WAAY,IAA7C,0BACA,cAAC,KAAD,IACA,cAAC,GAAD,CAAa3B,aAAc,CAAC,CAAEuB,MAAO,eAAMZ,GAAI,IAAMpB,IAAKA,QCxCxD7J,GAAqBC,IAArBD,MAAOI,GAAcH,IAAdG,UA0CA8L,IClBFC,GAAO,CAClB,CACEN,MAAO,qBACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,8BACPhI,IAAK,MACLwI,KAAM,oBACNC,UAAWpM,GAEb,CACE2L,MAAO,mCACPhI,IAAK,MACLwI,KAAM,oBACNC,UAAWhM,KAIjB,CACEuL,MAAO,cACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,6CACPhI,IAAK,MACLwI,KAAM,iBACNC,UAAW3H,GAEb,CACEkH,MAAO,yDACPhI,IAAK,MACLwI,KAAM,iBACNC,UAAW/G,GAEb,CACEsG,MAAO,mDACPhI,IAAK,MACLwI,KAAM,wBACNC,UAAW9G,IAEb,CACEqG,MAAO,mDACPhI,IAAK,MACLwI,KAAM,iBACNC,UAAWzG,MAIjB,CACEgG,MAAO,eACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,8CACPhI,IAAK,MACLwI,KAAM,kBACNC,UAAWxG,IAEb,CACE+F,MAAO,8CACPhI,IAAK,MACLwI,KAAM,yBACNC,UAAWrG,IAEb,CACE4F,MAAO,oDACPhI,IAAK,MACLwI,KAAM,0BACNC,UAAWjG,IAEb,CACEwF,MAAO,oDACPhI,IAAK,MACLwI,KAAM,gCACNC,UAAWhG,MAIjB,CACEuF,MAAO,qBACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,uDACPhI,IAAK,MACLwI,KAAM,+BACNC,UAAW9F,IAEb,CACEqF,MAAO,8CACPhI,IAAK,MACLwI,KAAM,6BACNC,UAAW5F,MAIjB,CACEmF,MAAO,gBACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,mCACPhI,IAAK,MACLwI,KAAM,kBACNC,UAAW5E,IAEb,CACEmE,MAAO,iDACPhI,IAAK,MACLwI,KAAM,oBACNC,UAAW7D,MAIjB,CACEoD,MAAO,gBACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,mCACPhI,IAAK,MACLwI,KAAM,kBACNC,UAAWlD,IAEb,CACEyC,MAAO,kCACPhI,IAAK,MACLwI,KAAM,oBACNC,UAAWhD,MAIjB,CACEuC,MAAO,YACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,+BACPhI,IAAK,MACLwI,KAAM,cACNC,UAAW/C,IAEb,CACEsC,MAAO,+BACPhI,IAAK,MACLwI,KAAM,kBACNC,UAAWtC,MAIjB,CACE6B,MAAO,yBACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,yCACPhI,IAAK,MACLwI,KAAM,kCACNC,UAAWpC,IAEb,CACE2B,MAAO,4CACPhI,IAAK,MACLwI,KAAM,2BACNC,UAAWR,MAIjB,CACED,MAAO,aACPhI,IAAK,IACLuI,SAAU,CACR,CACEP,MAAO,gCACPhI,IAAK,MACLwI,KAAM,eACNC,UDvMR,WACE,MAAsBjL,mBAAiB,GAAvC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KASM8K,EAAcC,mBAAQ,WAE1B,IAAK,IAAIC,EAAI,EAAGA,EAAI,UAAWA,KAG/B,OAAOnL,EAAMyB,KAAK2J,MAAsB,GAAhB3J,KAAKE,SAAgB,KAC5C,CAAC3B,IAEJ,OACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAOjB,MAAO,EAAd,uCACA,cAAC,GAAD,8SAGA,cAAC,GAAD,CAAOA,MAAO,EAAd,0BACA,cAAC,GAAD,wrBAKA,kDAAWiB,KAEX,+DAASiL,KACT,cAAC,IAAD,CAAQpL,QAAS,kBAAMI,GAAO,SAAAD,GAAG,OAAIA,EAAM,MAAIN,MAAO,CAAE8B,YAAa,IAArE,0BACA,cAAC,IAAD,CAAQ3B,QAAS,kBAAMM,GAAYD,IAAnC,iCCwKJ,CACEqK,MAAO,kBACPhI,IAAK,KACLuI,SAAU,CACR,CACEP,MAAO,qCACPhI,IAAK,OACLwI,KAAM,mBACNC,UAAWlL,GAEb,CACEyK,MAAO,qCACPhI,IAAK,OACLwI,KAAM,wBACNC,UAAWzK,KAIjB,CACEgK,MAAO,kBACPhI,IAAK,KACLuI,SAAU,CACR,CACEP,MAAO,mDACPhI,IAAK,OACLwI,KAAM,wBACNC,UAAW3J,GAEb,CACEkJ,MAAO,8EACPhI,IAAK,OACLwI,KAAM,wBACNC,UAAW9H,M,6BCpONmI,GAAkB,WAC7B,MAA0BC,aAAqB,CAC7CC,aAAc,GACdC,SAAU,GACV1I,MAAO,KAHT,mBAAO/B,EAAP,KAAc6C,EAAd,KAKO6H,EAAYC,eAAZD,SAgBP,OAdAlM,qBAAU,WACRsL,GAAKrB,SAAQ,SAAAC,GACXA,EAAKqB,SAAStB,SAAQ,SAAAmC,GAChBA,EAAMZ,OAASU,GACjB7H,GAAS,SAAA7C,GACPA,EAAMyK,SAAW,CAAC/B,EAAKlH,KACvBxB,EAAMwK,aAAe,CAACI,EAAMpJ,KAC5BxB,EAAM+B,MAAQ6I,EAAMpB,iBAK3B,CAACkB,IAEG,CACLF,aAAcxK,EAAMwK,aACpBC,SAAUzK,EAAMyK,SAChB1I,MAAO/B,EAAM+B,QC/BT8I,GAAYC,IAAZD,QAwBOE,GAtBE,WACf,MAAmCT,KAA3BE,EAAR,EAAQA,aAAR,EAAsBC,SACtB,OACE,cAAC,IAAD,CACE9L,MAAO,CAAEmK,MAAO,OAAQkC,OAAQ,QAChCR,aAAcA,EAEdS,KAAK,SAJP,SAMGnB,GAAKhJ,KAAI,SAAC4H,GAAD,OACR,cAACmC,GAAD,CAAwB9I,MAAO2G,EAAKc,MAApC,SACGd,EAAKqB,SAASjJ,KAAI,SAAC8J,GAAD,OACjB,cAAC,IAAKM,KAAN,UACE,cAAC,KAAD,CAAMC,GAAIP,EAAMZ,KAAhB,SAAwCY,EAAMpB,OAAnBoB,EAAMZ,OADnBY,EAAMpJ,SAFZkH,EAAKlH,WCPZ4J,GATI,WACjB,IAAQrJ,EAAUuI,KAAVvI,MACR,OACE,qBAAKpD,MAAO,CAAEiL,WAAY,IAA1B,SACE,oBAAIjL,MAAO,CAAEqC,MAAO,QAApB,SAA+Be,OCE7BsJ,GAAmCC,IAAnCD,MAAOE,GAA4BD,IAA5BC,OAAQC,GAAoBF,IAApBE,QAAoBF,IAAXG,OAiDjBC,OA/Cf,WACE,MAAkC1M,oBAAS,GAA3C,mBAAO2M,EAAP,KAAkBC,EAAlB,KAIA,OACE,qBAAK7I,UAAU,MAAf,SACE,cAAC,KAAD,UACE,eAAC,IAAD,CAAQpE,MAAO,CAAEqM,OAAQ,QAAzB,UACE,cAACK,GAAD,CACEvC,MAAO,IACP+C,aAAW,EACXF,UAAWA,EACXG,WAXS,WACjBF,GAAcD,IAMR,SAME,cAAC,GAAD,MAEF,eAAC,IAAD,WACE,cAACJ,GAAD,UACE,cAAC,GAAD,MAEF,cAACC,GAAD,CACE7M,MAAO,CAGLC,QAAS,OACTmN,SAAU,QALd,SAQE,eAAC,KAAD,WACGjC,GAAKhJ,KAAI,SAAC4H,GACT,GAAIA,EAAKqB,SACP,OAAOrB,EAAKqB,SAASjJ,KAAI,SAAC8J,GAAD,OACvB,cAAC,KAAD,CAAOZ,KAAMY,EAAMZ,KAAMgC,QAAS,cAACpB,EAAMX,UAAP,YAIxC,cAAC,KAAD,CAAUkB,GAAI,sCCvCfc,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCIdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.617f5503.chunk.js","sourcesContent":["/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-05 19:36:19\n * @Function: 该文件用途描述\n */\n\nimport { Typography } from \"antd\";\n\nconst { Title, Text, Paragraph } = Typography\n\nconst Chapter1_1 = () => {\n\n  return (\n    <Typography>\n      <Title level={2}>react是基本的页面渲染库，基于不同的平台有</Title>\n      <ul>\n        <li>react-dom: 浏览器</li>\n        <li>react-native: app环境</li>\n        <li>react-vr: vr平台</li>\n      </ul>\n\n      <Title level={2}>为什么要使用React-Hook</Title>\n      <ul>\n        <li>解决class组件存在的一些弊病：相关的逻辑分散在不同的生命周期里；高阶组件的嵌套地狱</li>\n        <li>复用代码逻辑。将一些复杂的逻辑封装起来，可供不同组件调用，减少代码量（拒绝cv）</li>\n      </ul>\n    </Typography>\n  );\n}\n\nexport default Chapter1_1\n","import React from 'react';\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\n\nconst { Title, Text, Paragraph } = Typography\n\nconst Chapter1_2 = () => {\n\n  return (\n    <Typography>\n      <Title level={2}>react-hook的发展历史</Title>\n      <Paragraph>\n        React 团队从一开始就很注重 React 的代码复用性。\n        他们对代码复用性的解决方案历经：Mixin, HOC, Render Prop，直到现在的 Custom Hook。\n        所以 Custom Hook 并不是一拍脑门横空出世的产物。\n      </Paragraph>\n      <Paragraph>\n        关于React-Hook发展历史的详细叙述，请<a href=\"https://www.notion.so/winddancer/React-542948adaff64eb4aed24a2f813e60c1\" target=\"_blank\" rel=\"noreferrer\">点击此处</a>\n      </Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter1_2","/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-26 16:40:37\n * @Function: use of this file\n */\nimport { Button } from 'antd';\nimport React, { useEffect } from 'react';\n\nfunction Child(props: {addNum: () => void}) {\n  const { addNum } = props\n\n  useEffect(() => {\n    console.log('函数重新定义了')\n  }, [addNum])\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件</h2>\n      <Button onClick={addNum}>增加</Button>\n    </div>\n  );\n}\n\nexport default Child;\n","/*\n * @Descripttion: useCalllback的用法\n * @Author: huangjitao\n * @Date: 2021-08-26 16:29:53\n * @Function: use of this file\n */\nimport React, { useCallback, useState } from 'react';\nimport { Button, Typography } from \"antd\";\nimport Child from './Child';\n\nconst { Title, Paragraph } = Typography\n\nfunction Chapter10_1() {\n  const [num, setNum] = useState<number>(0);\n  const [refresh, setRefresh] = useState<boolean>(false)\n\n  // const addNum = () => {\n  //   setNum(num => num + 1)\n  // }\n\n  const addNum = useCallback(() => {\n    setNum(num => num + 1)\n  }, [])\n  \n  return (\n    <Typography>\n      <Title level={2}>useCallback的使用</Title>\n      <Paragraph>\n        把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。\n      </Paragraph>\n      <Title level={3}>案例</Title>\n      <div style={{ padding: 10, border: '1px solid #000' }}>\n        <h2>父组件</h2>\n        <Paragraph>\n          定义一个状态变量num，并定义一个方法addNum可以增加状态值；\n          将该方法addNum传递给子组件，并在子组件中监视该方法是否重新定义；\n        </Paragraph>\n        <p>数字num: {num}</p>\n        <Button onClick={() => setRefresh(!refresh)}>刷新</Button>\n        <Child addNum={addNum}/>\n      </div>\n    </Typography>\n  );\n}\n\nexport default Chapter10_1;\n","/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-26 17:08:22\n * @Function: use of this file\n */\nimport { Button } from 'antd';\nimport React from 'react';\n\nconst Child = React.memo((props: {addNum: () => void}) => {\n  const { addNum } = props\n\n  console.log('子组件重新渲染了')\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件</h2>\n      <Button onClick={addNum}>增加</Button>\n    </div>\n  );\n})\n\nexport default Child;","/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-26 17:07:01\n * @Function: use of this file\n */\nimport React, { useCallback, useState } from 'react';\nimport { Button, Typography } from \"antd\";\nimport Child from './Child';\n\nconst { Title, Paragraph } = Typography\n\nfunction Chapter10_2() {\n  const [num, setNum] = useState<number>(0);\n  const [refresh, setRefresh] = useState<boolean>(false)\n\n  // const addNum = () => {\n  //   setNum(num => num + 1)\n  // }\n\n  const addNum = useCallback(() => {\n    setNum(num => num + 1)\n  }, [])\n  \n  return (\n    <Typography>\n      <Title level={2}>useCallback的优化</Title>\n      <Paragraph>\n        当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate, React.memo）的子组件时，使用useCallback将非常有用。\n      </Paragraph>\n      <Title level={3}>案例</Title>\n      <div style={{ padding: 10, border: '1px solid #000' }}>\n        <h2>父组件</h2>\n        <Paragraph>\n          将函数传递给经过React.memo优化过的子组件时，\n          如果传递的是普通函数，则每次父组件的重新渲染，都将导致该函数重新定义。此时React.memo的引用地址比较失去意义，子组件仍将跟着父组件一起重新渲染；\n          如果将该函数经过useCallback优化，则传递的该函数并不会在每次父组件重新渲染时重定义。因此React.memo就会起到作用，避免子组件不必要的渲染。\n        </Paragraph>\n        <p>数字num: {num}</p>\n        <Button onClick={() => setRefresh(!refresh)}>刷新</Button>\n        <Child addNum={addNum}/>\n      </div>\n    </Typography>\n  );\n}\n\nexport default Chapter10_2;","/*\n * @Title: useArray custom hook\n * @Author: huangjitao\n * @Date: 2021-10-18 16:00:30\n * @Description: 自定义一个hook，实现对数组一系列操作的封装\n */\nimport { useCallback, useState } from 'react';\n\nconst useArray = <T>(val: T[]) => {\n  const [value, setValue] = useState(val);\n\n  // 清空列表\n  const clear = useCallback(() => {\n    setValue([]);\n  }, [])\n\n  // 移除列表特定位置元素\n  const removeIndex = useCallback((index: number) => {\n    setValue(state => {\n      const temp = [...state]\n      temp.splice(index, 1);\n      return temp\n    });\n  }, [])\n\n  // 添加元素\n  const add = useCallback((thing: T) => {\n    setValue(state => {\n      const temp = [...state]\n      temp.push(thing)\n      return temp\n    });\n  }, [])\n  return {\n    value,\n    clear,\n    removeIndex,\n    add,\n  };\n};\n\nexport default useArray;\n","/*\n * @Title: 如何写一个自定义hook\n * @Author: huangjitao\n * @Date: 2021-10-18 15:57:53\n * @Description: 展示自定义的useArray hook, 如何对列表进行操作\n */\nimport { Button, Typography } from 'antd';\nimport React from 'react';\nimport useArray from './useArray';\n\nconst { Title, Paragraph } = Typography\n\nfunction Chapter11_1() {\n  const persons: { name: string; age: number }[] = [\n    { name: \"小花\", age: 25 },\n    { name: \"小张\", age: 22 }\n  ];\n  const { value, clear, removeIndex, add } = useArray(persons);\n\n  return (\n    <Typography>\n      <Title level={2}>如何自定义一个custom hook</Title>\n      <Paragraph>\n        自定义一个useArray hook，实现了对数组的一系列操作的封装；\n        调用它可以在页面上展示列表数据，并对列表数据进行添加、移除、清除的操作\n      </Paragraph>\n      <Title level={2}>实例1：useArray hook</Title>\n      <Button\n        style={{ marginRight: \"50px\" }}\n        onClick={() => add({ name: \"小明\", age: 1 + Math.round(Math.random() * (100 - 1)) })}\n      >\n        添加\n      </Button>\n      <Button style={{ marginRight: \"50px\" }} onClick={() => removeIndex(0)}>\n        移除首位\n      </Button>\n      <Button style={{ marginBottom: \"50px\" }} onClick={() => clear()}>\n        清空\n      </Button>\n      {value.map((person, index) => (\n        <div style={{ marginBottom: \"30px\" }}>\n          <span style={{ color: \"red\", marginRight: \"20px\" }}>{index}</span>\n          <span>{person.name}</span>\n          <span>{person.age}</span>\n        </div>\n      ))}\n    </Typography>\n  );\n}\n\nexport default Chapter11_1;\n","/*\n * @Title: your project\n * @Author: huangjitao\n * @Date: 2021-10-18 17:25:59\n * @Description: description of this file\n */\n\nimport { useCallback, useState } from \"react\";\n\nconst useQuery = () => {\n  const [dataList, setDataList] = useState<Array<any>>([]);\n  const [loading, setLoading] = useState<boolean>(false)\n\n  // 请求数据\n  const mutate = useCallback(() => {\n    // 模拟数据请求\n    setLoading(true)\n    setTimeout(() => {\n      setDataList([\n        {key: 1, name: '小明', age: Math.ceil(Math.random()* 30), gender: 'male'},\n        {key: 2, name: '小花', age: Math.ceil(Math.random()* 30), gender: 'female'},\n        {key: 3, name: '小张', age: Math.ceil(Math.random()* 30), gender: 'male'},\n        {key: 4, name: '小李', age: Math.ceil(Math.random()* 30), gender: 'female'},\n      ])\n      setLoading(false)\n    }, 1000);\n  }, [])\n\n  // 清除数据\n  const clear = useCallback(() => {\n    setDataList([])\n  }, [])\n\n  return {\n    dataList,\n    loading,\n    mutate,\n    clear\n  }\n};\n\nexport default useQuery;","/*\n * @Title: your project\n * @Author: huangjitao\n * @Date: 2021-10-18 17:47:36\n * @Description: description of this file\n */\nimport { Button, Table } from 'antd';\nimport React from 'react';\nimport useQuery from './useQuery';\n\nfunction PageOne() {\n  const {dataList, loading, mutate, clear} = useQuery()\n  return (\n    <div>\n      <Button onClick={mutate}>获取数据</Button>\n      <Button onClick={clear}>清除数据</Button>\n      <Table dataSource={dataList} loading={loading}>\n        <Table.Column dataIndex=\"name\" title=\"姓名\"/>\n        <Table.Column dataIndex=\"age\" title=\"年龄\"/>\n        <Table.Column dataIndex=\"gender\" title=\"性别\"/>\n      </Table>\n    </div>\n  );\n}\n\nexport default PageOne;\n","/*\n * @Title: your project\n * @Author: huangjitao\n * @Date: 2021-10-18 17:47:45\n * @Description: description of this file\n */\nimport { Button, Table } from 'antd';\nimport React from 'react';\nimport useQuery from './useQuery';\n\nfunction PageTwo() {\n  const {dataList, loading, mutate, clear} = useQuery()\n  return (\n    <div>\n      <Button onClick={mutate}>获取数据</Button>\n      <Button onClick={clear}>清除数据</Button>\n      <Table dataSource={dataList} loading={loading}>\n        <Table.Column dataIndex=\"name\" title=\"姓名\"/>\n        <Table.Column dataIndex=\"age\" title=\"年龄\"/>\n        <Table.Column dataIndex=\"gender\" title=\"性别\"/>\n      </Table>\n    </div>\n  );\n}\n\nexport default PageTwo;\n","/*\n * @Title: custom hook的使用场景\n * @Author: huangjitao\n * @Date: 2021-10-18 16:42:01\n * @Description: 将请求操作的一系列重复代码进行封装，拒绝复制粘贴重复代码的行为。\n */\nimport { Tabs, Typography } from 'antd';\nimport React from 'react';\nimport PageOne from './PageOne';\nimport PageTwo from './PageTwo';\n\nconst { Title, Paragraph } = Typography\nconst { TabPane } = Tabs;\n\nfunction Chapter11_2() {\n  return (\n    <Typography>\n      <Title level={2}>custom hook的使用场景</Title>\n      <Paragraph>\n        自定义hook通常用于将重复的代码逻辑进行封装，这样在多个组件处使用相同逻辑时，直接调用hook获取相关的状态数据和方法，从而大大减少代码量；\n        在这个实例中，多个组件（页面）使用到了相同的请求和相关操作，因此可以将则部分代码封装成hook\n      </Paragraph>\n      <Title level={2}>实例2：useQuery hook</Title>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"页面1\" key=\"1\">\n          <PageOne />\n        </TabPane>\n        <TabPane tab=\"页面2\" key=\"2\">\n          <PageTwo/>\n        </TabPane>\n      </Tabs>\n    </Typography>\n  );\n}\n\nexport default Chapter11_2;\n","/*\n * @Descripttion: useState的基本用法\n * @Author: huangjitao\n * @Date: 2021-08-05 19:41:08\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst Chapter2_1 = () => {\n  // 声明一个叫 \"count\" 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <Typography>\n      <Title level={2}>useState的基本用法</Title>\n      <Paragraph>\n        <Text code>const [state, setState] = useState(initValue)</Text>{\" \"}\n      </Paragraph>\n      <Paragraph>useState使React函数组件拥有了状态。</Paragraph>\n      <ul>\n        <li>括号里的initValue是state的初始值。</li>\n        <li>\n          数组解构的第一个参数是最新的state值，每次state的值的改变将触发页面重新渲染。\n        </li>\n        <li>\n          数组解构的第二个参数是state的更新函数，通过给setState(newState)传递参数newState来改变状态值（state)，并引发页面的重新渲染。\n        </li>\n      </ul>\n      <Title level={3}>实例</Title>\n      <p>点击次数：{count}</p>\n      <Button onClick={() => setCount(count + 1)}>点击增加</Button>\n    </Typography>\n  );\n};\n\nexport default Chapter2_1;\n","/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-05 21:06:15\n * @Function: 该文件用途描述\n */\n\nimport { Button } from 'antd'\nimport React from 'react'\n\nexport default class ClassComponent extends React.Component {\n  state = {\n    number: 0,\n  }\n\n  handleClick = () => {\n    this.setState({\n      number: this.state.number + 1\n    })\n    console.log('1', this.state.number)\n    this.setState({\n      number: this.state.number + 2\n    })\n    console.log('2', this.state.number)\n    this.setState({\n      number: this.state.number + 3\n    })\n    console.log('3', this.state.number)\n    setTimeout(() => {\n      this.setState({\n        number: this.state.number + 1\n      })\n      console.log('4', this.state.number)\n      this.setState({\n        number: this.state.number + 2\n      })\n      console.log('5', this.state.number)\n      this.setState({\n        number: this.state.number + 3\n      })\n      console.log('6', this.state.number)\n    }, 10)\n\n  }\n  render() {\n    return (\n      <div>\n        <p>数字：{this.state.number}</p>\n        <Button onClick={this.handleClick} className=\"bnt-margin\">增加</Button>\n        <Button onClick={() => this.setState({number: 0})} className=\"bnt-margin\">重置</Button>\n      </div>\n    )\n  }\n}\n","/*\n * @Descripttion: 函数组件异步setState\n * @Author: huangjitao\n * @Date: 2021-08-05 21:09:49\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\n\nconst FunctionComponent = () => {\n  const [num, setNum] = useState(0);\n\n  const addNumAsync = () => {\n    setNum(num + 1)\n    console.log('1', num)\n    setNum(num + 2)\n    console.log('2', num)\n    setNum(num + 3)\n    console.log('3', num)\n    setTimeout(() => {\n      setNum(num + 1)\n      console.log('4', num)\n      setNum(num + 2)\n      console.log('5', num)\n      setNum(num + 3)\n      console.log('6', num)\n    });\n  }\n  return (\n    <div>\n      <p>数字：{num}</p>\n      <Button onClick={addNumAsync} className=\"bnt-margin\">增加</Button>\n      <Button onClick={() => setNum(0)} className=\"bnt-margin\">重置</Button>\n    </div>\n  );\n}\n\nexport default FunctionComponent","/*\n * @Descripttion: setState是同步的还是异步的\n * @Author: huangjitao\n * @Date: 2021-08-05 20:07:13\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\nimport ClassComponent from \"./ClassComponent\";\nimport FunctionComponent from \"./FunctionComponent\";\n\nconst { Title, Text, Paragraph } = Typography\n\nconst Chapter2_2 = () => {\n  const [num, setNum] = useState(0);\n  const [number, setNumber] = useState(0)\n\n  const addNum = () => {\n    setNum(num + 1)\n    console.log('1', num)\n    setNum(num + 2)\n    console.log('2', num)\n    setNum(num + 3)\n    console.log('3', num)\n  };\n\n  return (\n    <Typography>\n      <Title level={2}>setState的批处理、合并机制</Title>\n\n      <Title level={3}>实例1：依次点击多次调用setState</Title>\n      <Paragraph>点击一次增加按钮，连续调用了三次setState，分别将num +1， +2， +3。最后发现，num相较于点击按钮之前只增加了3，而不是预期的6</Paragraph>\n      <p>数字：{num}</p>\n      <Button onClick={addNum} className=\"bnt-margin\">增加</Button>\n      <Button onClick={() => setNum(0)} className=\"bnt-margin\">重置</Button>\n\n      <Title level={3}>实例2: 类组件</Title>\n      <Paragraph>现在点击一次增加按钮，先调用三次setState，再在setTimeout里调用三次setState，最后发现这次num点击一次增加的结果是9</Paragraph>\n      <ClassComponent />\n\n      <Title level={3}>实例3: 函数组件</Title>\n      <Paragraph>重复上面的操作，但是现在将其实现方式改为函数组件。最后发现这次num点击一次增加的结果是3</Paragraph>\n      <FunctionComponent/>\n\n      <Title level={3}>setState有时同步，有时异步</Title>\n      <Paragraph>点击实例1（将其重置为0）中的一次增加按钮，打开控制台，发现在每次setState下面打印的num都是0</Paragraph>\n      <Paragraph>点击实例2（将其重置为0）中的一次增加按钮，打开控制台，发现在每次setState下面打印的num是0,0,0,4,6,9</Paragraph>\n      <Paragraph>点击实例3（将其重置为0）中的一次增加按钮，打开控制台，发现在每次setState下面打印的num都是0</Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter2_2\n","/*\n * @Descripttion: useState的函数式更新\n * @Author: huangjitao\n * @Date: 2021-08-05 22:03:31\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\n\nconst { Title, Text, Paragraph } = Typography\n\nconst Chapter2_3 = () => {\n  const [num, setNum] = useState(0);\n\n  const addNumAsync = () => {\n    setNum(num => num + 1)\n    console.log('1', num)\n    setNum(num => num + 2)\n    console.log('2', num)\n    setNum(num => num + 3)\n    console.log('3', num)\n    setTimeout(() => {\n      setNum(num => num + 1)\n      console.log('4', num)\n      setNum(num => num + 2)\n      console.log('5', num)\n      setNum(num => num + 3)\n      console.log('6', num)\n    });\n  };\n\n  return (\n    <Typography>\n      <Title level={2}>setState的函数式更新</Title>\n      <Title level={3}>实例：通过函数式更新获取最新的state值</Title>\n      <Paragraph>修改上一节的实例3，通过函数式更新获取最新的state值；并且通过函数式更新，来避免React的合并策略</Paragraph>\n      <p>数字：{num}</p>\n      <Button onClick={addNumAsync}>增加</Button>\n    </Typography>\n  );\n}\n\nexport default Chapter2_3","/*\n * @Descripttion: 使用useState存储函数\n * @Author: huangjitao\n * @Date: 2021-08-06 07:00:59\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography\n\nconst FunctionState = () => {\n  const [callback, setCallback] = useState(() => () => {alert('init')})\n  return (\n    <Typography>\n      <Title level={3}>实例：如何存储函数</Title>\n      <Paragraph>基于useState的惰性初始化，因此可以在传入一个函数，该函数返回一个我们需要存储的函数</Paragraph>\n      <Button onClick={() => {setCallback(() => () => {alert('change')})}} className=\"bnt-margin\">更改函数</Button>\n      <Button onClick={callback} className=\"bnt-margin\">执行函数</Button>\n    </Typography>\n  );\n}\n\nexport default FunctionState","/*\n * @Descripttion: useState的惰性初始化\n * @Author: huangjitao\n * @Date: 2021-08-06 06:49:32\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useState } from \"react\";\nimport FunctionState from \"./FunctionState\";\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst Chapter2_4 = () => {\n  const [callback, setCallback] = useState(() => {\n    alert(\"init\");\n  });\n\n  /* eslint-disable */\n  return (\n    <Typography>\n      <Title level={2}>useState惰性初始化</Title>\n      <Paragraph>\n        给useState初始化传入一个函数，\n        <Text code>\n          {\"const [callback, setCallback] = useState(() => { alert('init') })\"}\n        </Text>\n      </Paragraph>\n      <Paragraph>\n        预期：先存储函数，在调用该函数的时候才会去执行。结果发现刚打开页面，就直接执行了这个函数。\n      </Paragraph>\n      <Button\n        className=\"bnt-margin\"\n        onClick={() => {\n          setCallback(() => {\n            alert(\"change\");\n          });\n        }}\n      >\n        更改函数\n      </Button>\n      {/* <Button onClick={callback}>执行函数</Button> */}\n      <FunctionState />\n    </Typography>\n  );\n  /* eslint-disable */\n};\n\nexport default Chapter2_4;\n","/*\n * @Descripttion: useEffect的基本用法\n * @Author: huangjitao\n * @Date: 2021-08-06 11:23:34\n * @Function: use of this file\n */\n\nimport { Button, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst Chapter3_1 = () => {\n  const [num, setNum] = useState<number>(0);\n  const [doubleNum, setDoubleNum] = useState<number>(0);\n\n  useEffect(() => {\n    console.log(\"页面渲染完毕\");\n    setDoubleNum(num * 2);\n  }, [num]);\n\n  return (\n    <Typography>\n      <Title level={2}>useEffect的基本用法</Title>\n      <Text code>\n        {`useEffect(() => {\n          // do some effect function\n        }, [dependence]);`}\n      </Text>\n      <Title level={3}>实例</Title>\n      <Paragraph>\n        useEffect在页面渲染完成后执行。在本例中点击按钮使状态值num改变，页面重新渲染，接着执行useEffect，将状态值doubleNum更新为num的两倍\n      </Paragraph>\n      <p>num: {num}</p>\n      <p>doubleNum: {doubleNum}</p>\n      <Button onClick={() => setNum(num + 1)} className=\"bnt-margin\">\n        增加num\n      </Button>\n      <Paragraph>\n        <ul>\n          <li>当没有依赖项，会在组件每次更新后执行</li>\n          <li>依赖项为空数组：会在组件挂载和卸载时执行</li>\n          <li>依赖项为变量时，会在这些变量改变后才执行</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n};\n\nexport default Chapter3_1;\n","/*\n * @Descripttion: useEffect清除effect\n * @Author: huangjitao\n * @Date: 2021-08-06 17:36:57\n * @Function: use of this file\n */\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography;\n\nfunction Chapter3_2() {\n  const [num, setNum] = useState<number>(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setNum(num + 1);\n    }, 2000);\n    console.log(\"effect部分\");\n    return () => {\n      clearInterval(timer);\n      console.log(\"return部分\");\n    };\n  }, [num]);\n  return (\n    <Typography>\n      <Title level={2}>useEffect如何清除effect</Title>\n      <Paragraph>\n        <ul>\n          <li>React会在第一次渲染时执行useEffect中的函数，是不会执行return。</li>\n          <li>effect 在之后的每次渲染的时候都会执行。此时先执行return函数，再执行effect中的副作用。</li>\n          <li>React 会在组件卸载的时候执行清除操作（即执行return）</li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <Paragraph>\n        在控制台发现刚加载时，打印的是\"effect部分\"（即只执行的副作用部分）；\n        之后每次先打印\"return部分\"，在打印\"effect部分\"(即先执行清除部分，在执行副作用部分)；\n        当点击其它页面时（即该组件卸载时），只打印了\"return部分\"（即只执行了清除部分）。\n        整个过程保证了只有一个定时器。\n      </Paragraph>\n      <p>数字：{num}</p>\n    </Typography>\n  );\n}\n\nexport default Chapter3_2;\n","/*\n * @Descripttion: useEffct的依赖项问题\n * @Author: huangjitao\n * @Date: 2021-08-14 10:34:51\n * @Function: 探究依赖项的意义\n */\n\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography;\n\nfunction Chapter3_3() {\n  const [num, setNum] = useState<number>(0);\n\n  const addNum = () => {\n    setNum(num + 1)\n  }\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log('num:', num)\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return (\n    <Typography>\n      <Title level={2}>useEffectde的依赖项问题</Title>\n      <Title level={3}>useEffectde的依赖项的意义是什么？</Title>\n      <Paragraph>\n        使用上一节的定时器例子，这次不适用依赖项，该定时器将定时打印num的值。\n        结果发现，打印的num值一直是0（符合预期）；\n        但是当点击增加按钮修改num的值后，打印的num值仍然是0。\n      </Paragraph>\n      <p>数字：{num}</p>\n      <Button onClick={addNum}>增加</Button>\n      <Title level={3}>React-hooks与闭包</Title>\n      <Paragraph>\n        这是因为React-hooks严重依赖闭包，有关闭包的知识可参考文档中对应章节的内容。\n      </Paragraph>\n      <Paragraph>\n        React正是依赖了闭包的特性，因此调用多个useState时，它们之间的状态值互不影响；但也正是因为闭包的特性，导致useEffect中使用了过期的状态值。\n        因此依赖项的作用就是：在依赖项改变时，重新创建一个新的hook，并在创建的过程中拿到最新的值。\n        如果使用了eslint的话，vscode会在依赖项里提示你将在useEffect中用到的变量添加进依赖项中。\n      </Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter3_3;\n","/*\n * @Descripttion: useEffect依赖项的选择\n * @Author: huangjitao\n * @Date: 2021-08-14 11:24:06\n * @Function: 正确选择依赖项\n */\n\nimport { Button, Table, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography;\n\nfunction Chapter3_4() {\n  const constValue = 1 // 普通常量\n  const object = {}  // 普通对象\n  const [refresh, setRefresh] = useState<boolean>(false) // 普通状态值\n  const [otherObject, setOtherObject] = useState<{[key: string]: any}>({}) // 对象状态值\n  const [dataSource, setDataSource] = useState<any>([]); // 对象状态值\n\n  useEffect(() => {\n    console.log(\"页面重新渲染了\")\n    setDataSource([\n      {key: 1, name: '小明', age: Math.ceil(Math.random()* 30), gender: 'male'},\n      {key: 2, name: '小花', age: Math.ceil(Math.random()* 30), gender: 'female'},\n      {key: 3, name: '小张', age: Math.ceil(Math.random()* 30), gender: 'male'},\n      {key: 4, name: '小李', age: Math.ceil(Math.random()* 30), gender: 'female'},\n    ])\n  }, [constValue])\n\n  return (\n    <Typography>\n      <Title level={2}>useEffectdet依赖项的选择</Title>\n      <Title level={3}>实例</Title>\n      <Button onClick={() => setRefresh(!refresh)}>刷新数据</Button>\n      <Table dataSource={dataSource}>\n        <Table.Column dataIndex=\"name\" title=\"姓名\"/>\n        <Table.Column dataIndex=\"age\" title=\"年龄\"/>\n        <Table.Column dataIndex=\"gender\" title=\"性别\"/>\n      </Table>\n      <Paragraph>分别改变useEffcet中的依赖项看看会发生什么：\n        <ul>\n          <li>使用普通常量（constValue）作为依赖项，页面只会渲染一次</li>\n          <li>使用普通对象（object)作为依赖项，页面无限渲染</li>\n          <li>使用普通状态值（refresh），在状态值改变时页面重新渲染</li>\n          <li>使用对象状态值（otherObject），页面只会渲染一次</li>\n          <li>使用对象状态值（dataSource）并且在useEffect中改变了该对象状态值，页面无限渲染</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter3_4;\n","/*\n * @Descripttion: useLayoutEffect与useEffect的区别\n * @Author: huangjitao\n * @Date: 2021-08-15 10:25:35\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography;\n\nfunction Chapter4_1() {\n  const [num, setNum] = useState<number>(0)\n\n  useEffect(() => {\n    console.log('执行第一个effect')\n  }, [num])\n  \n  useEffect(() => {\n    console.log('执行第二个effect')\n  }, [num])\n\n  useLayoutEffect(() => {\n    console.log('执行layout-effect')\n  }, [num])\n\n  const clickHandle = () => {\n    setNum(num + 1)\n  }\n\n  return (\n    <Typography>\n      <Title level={2}>useLayoutEffect与useEffect的区别</Title>\n      <Paragraph>\n        点击增加按钮，改变状态值num。在控制台中发现：useLayout总是比useEffect先执行。\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <p>数字：{num}</p>\n      <Button onClick={clickHandle}>增加</Button>\n      <Paragraph>\n        通过比较得到：useLayoutEffect是在DOM更新后同步执行，useEffect是在页面重新绘制后执行\n      </Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter4_1;\n","/*\n * @Descripttion: 何时使用useLayoutEffect\n * @Author: huangjitao\n * @Date: 2021-08-15 11:38:18\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nconst { Title, Text, Paragraph } = Typography;\n\nfunction Chapter4_2() {\n\n  const [num, setNum] = useState(0);\n  useEffect(() => {\n    console.log(`useEffect - count=${num}`)\n    // 耗时的操作\n    const pre = Date.now();\n    while(Date.now() - pre < 1000) {}\n    \n    // num为0时重新生成个随机数\n    if (num === 0) {    \n        setNum(10 + Math.random() * 200);\n    }\n  }, [num]);\n  \n  const [count, setCount] = useState(0);\n  useLayoutEffect(() => {\n    console.log(`useLayoutEffect - count=${count}`)\n    // 耗时的操作\n    const pre = Date.now();\n    while(Date.now() - pre < 1000) {}\n\n    if (count === 0) {    \n        setCount(10 + Math.random() * 200);\n    }\n  }, [count]);\n  \n\n  return (\n    <Typography>\n      <Title level={2}>useLayoutEffect与useEffect的区别</Title>\n      <Paragraph>\n        点击按钮重置状态值num为0，num为0时，在1000ms后状态值num随机变为一个非0的值。使用useEffect处理该副作用，发现有一个明显的num从0 到 随机值的过程。\n      </Paragraph>\n      <Title level={3}>实例1：使用useEffect</Title>\n      <p>数字num：{num}</p>\n      <Button onClick={() => setNum(0)}>重置</Button>\n      <Paragraph>\n        该用useLayoutEffect处理该副作用，发现点击重置后直接显示了新的随机值，变0的这个过程没有在页面上显示出来。\n      </Paragraph>\n      <Title level={3}>实例2：使用useLayoutEffect</Title>\n      <p>数字count：{count}</p>\n      <Button onClick={() => setCount(0)}>重置</Button>\n    </Typography>\n  );\n}\n\nexport default Chapter4_2;\n","/*\n * @Descripttion: reducer\n * @Author: huangjitao\n * @Date: 2021-08-15 17:10:22\n * @Function: 该文件用途描述\n */\n\nexport type State<T> = {\n  past: T[]; // 存放历史值\n  present: T; // 当前值\n  future: T[]; // 存放undo值，用于取消撤销\n}\n\nexport type Action<T> = {\n  newPresent?: T;\n  type: 'UNDO' | 'REDO' | 'SET' | 'RESET';\n}\n\nexport const undoReducer = <T>(state: State<T>, action: Action<T>) => {\n  const { past, present, future } = state;\n  const {newPresent} = action\n  switch (action.type) {\n    case 'UNDO':\n      if (past.length === 0) return state;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future],\n      };\n    case 'REDO':\n      if (future.length === 0) return state;\n      const next = future[0];\n      const newFuture = future.slice(1);\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture,\n      };\n    case 'SET':\n      if (newPresent === present) return state;\n      return {\n        past: [...past, present],\n        present: newPresent,\n        future: [],\n      };\n    case 'RESET':\n      return {\n        past: [],\n        present: newPresent,\n        future: [],\n      };\n    default:\n      return state\n  }\n}","/*\n * @Descripttion: useReducer的使用\n * @Author: huangjitao\n * @Date: 2021-08-15 16:57:48\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport React, { useCallback, useReducer } from \"react\";\nimport { State, undoReducer } from \"./reducer\";\nconst { Title, Paragraph } = Typography;\n\nfunction Chapter5_1() {\n  const [state, dispatch] = useReducer(undoReducer, {\n    past: [],\n    present: 0,\n    future: [],\n  } as State<number>)\n\n  const present = state.present as number;\n\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n\n  // 撤销\n  const undo = useCallback(() => {dispatch({type: 'UNDO'})}, []);\n\n  // 取消撤销\n  const redo = useCallback(() => {dispatch({type: 'REDO'})}, []);\n\n  // 指定为特定值\n  const set = useCallback((newPresent: number) => {dispatch({type: 'SET', newPresent: newPresent})}, []);\n\n  // 重置为初始值\n  const reset = useCallback(() => {dispatch({type: 'RESET', newPresent: 0})}, []);\n\n\n  return (\n    <Typography>\n      <Title level={2}>使用useReducer代替useState管理复杂的状态</Title>\n      <Title level={3}>功能描述</Title>\n      <Paragraph>\n        可以对一个数字进行不断地赋值，同时记录下历史值；可以通过undo对当前值进行撤销操作，一步步地回到最初值；\n        在进行撤销操作的同时，记录下undo掉的值；\n        通过redo可以回到undo之前的值，不断地redo最终可以回到执行所有撤销操作之前的值。\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <div>当前值：{present}</div>\n      <div style={{ marginTop: 30 }}>\n        <Button onClick={undo} disabled={!canUndo} style={{ marginRight: 15 }}>\n          撤销\n        </Button>\n        <Button onClick={redo} disabled={!canRedo} style={{ marginRight: 15 }}>\n          恢复撤销\n        </Button>\n        <Button\n          onClick={() => {\n            set(present + 1);\n          }}\n          style={{ marginRight: 15 }}\n        >\n          增加\n        </Button>\n        <Button\n          onClick={() => {\n            set(present - 1);\n          }}\n          style={{ marginRight: 15 }}\n        >\n          减少\n        </Button>\n        <Button onClick={reset}>重置</Button>\n      </div>\n      <Title level={3}>总结</Title>\n      <Paragraph>\n        本例也可以通过useState来实现，但是相较于useReducer来说，useState实现起来更加的麻烦。\n        因此在如下场景中，建议使用useReducer代替useState进行状态管理：\n        <ul>\n          <li>state中的状态值之间相互关联；</li>\n          <li>下一个 state的更新依赖于之前的 state。</li>\n        </ul>\n      </Paragraph>\n    </Typography>\n  );\n}\n\nexport default Chapter5_1;\n","/*\n * @Descripttion: reducer\n * @Author: huangjitao\n * @Date: 2021-08-15 19:00:27\n * @Function: 该文件用途描述\n */\n\nexport type State = {\n  loading: boolean; // 加载状态\n  dataSource: any[]\n}\n\nexport type Action = {\n  data?: any[];\n  type: 'START' | 'SUCCESS';\n}\n\nexport const fetchDataReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'START':\n      return {\n        ...state,\n        loading: true,\n      }\n    case 'SUCCESS':\n      return {\n        loading: false,\n        dataSource: action.data\n      };\n    default:\n      return state\n  }\n}\n\nexport const getDataSource = () => {\n  return (dispatch: React.Dispatch<Action>) => {\n    setTimeout(() => {\n      dispatch({\n        type: 'SUCCESS',\n        data: [\n          {key: 1, name: '小明', age: Math.ceil(Math.random()* 30), gender: 'male'},\n          {key: 2, name: '小花', age: Math.ceil(Math.random()* 30), gender: 'female'},\n          {key: 3, name: '小张', age: Math.ceil(Math.random()* 30), gender: 'male'},\n          {key: 4, name: '小李', age: Math.ceil(Math.random()* 30), gender: 'female'},\n        ]\n      })\n    }, 1000);\n  }\n}","/*\n * @Descripttion: 可dispatch异步函数的useReducer\n * @Author: huangjitao\n * @Date: 2021-08-15 19:12:52\n * @Function: 该文件用途描述\n */\n\nimport { useReducer } from \"react\";\nimport { Action, State } from \"./reducer\";\n\nconst thunkDispatch = (dispatch: React.Dispatch<Action>, getState: () => \n  {\n    loading: boolean;\n    dataSource: any;\n  }\n) => {\n  return (action: any) => {\n    if (typeof action === 'function') {\n      action(thunkDispatch(dispatch, getState), getState);\n    } else {\n      dispatch(action);\n    }\n  };\n};\n\nexport const useThunkReducer = (reducer: (state: State, action: Action) => \n  {\n    loading: boolean;\n    dataSource: any;\n  }, \n  defaultState: State\n) => {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  const getState = () => state;\n  const newDispatch = thunkDispatch(dispatch, getState);\n  return [state, newDispatch] as const\n};\n","/*\n * @Descripttion: useReducer如何dispatch函数\n * @Author: huangjitao\n * @Date: 2021-08-15 18:58:02\n * @Function: 该文件用途描述\n */\n\nimport { Button, Table, Typography } from \"antd\";\nimport React from \"react\";\nimport { fetchDataReducer, getDataSource, State } from \"./reducer\";\nimport { useThunkReducer } from \"./useThunkReducer\";\nconst { Title, Paragraph } = Typography;\n\nfunction Chapter5_2() {\n  const [state, dispatch] = useThunkReducer(fetchDataReducer, {\n    dataSource: [],\n    loading: false\n  })\n\n  const { loading, dataSource } = state as State\n\n  const clickHandle = () => {\n    // 请求开始前，先将加载状态置为true\n    dispatch({\n      type: 'START',\n      dataSource: []\n    })\n    // 直接将请求接口的函数传给dispatch\n    dispatch(getDataSource())\n  }\n\n  return (\n    <Typography>\n      <Title level={2}>useReducer如何dispatch函数</Title>\n      <Paragraph>\n        reducer要求返回的必须是一个plain object\n        但是在开发中，我们要用到的状态大多数都是从后台获取的。但useReducer不能dispatch一个函数。\n        当然你可以在接口返回数据后，再dispatch接口数据，但是这样的话，代码耦合度就很高了，不符合React的哲学：组件专注于渲染！\n      </Paragraph>\n      <Title level={3}>功能描述</Title>\n      <Paragraph>\n        仿照React-thunk的思想，将useReducer进行在封装，拦截action，判断其类型，如果是函数，则将该函数的返回值当做action。\n        这样能实现接口请求的逻辑与数据渲染想解耦！\n        在下面的一个例子中，dispatch的就是接口请求函数。\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <Button onClick={clickHandle} type=\"primary\">刷新</Button>\n      <Table dataSource={dataSource} loading={loading}>\n        <Table.Column dataIndex=\"name\" title=\"姓名\"/>\n        <Table.Column dataIndex=\"age\" title=\"年龄\"/>\n        <Table.Column dataIndex=\"gender\" title=\"性别\"/>\n      </Table>\n    </Typography>\n  );\n}\n\nexport default Chapter5_2;\n","/*\n * @Descripttion: 子组件1\n * @Author: huangjitao\n * @Date: 2021-08-15 15:51:52\n * @Function: Chapter5_1的子组件\n */\n\nimport React, { useContext } from \"react\";\nimport { Context } from \"./index\";\n\nfunction ChildOne() {\n  const context = useContext(Context)\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件1</h2>\n      <p>该子组件用来显示num值</p>\n      <p>数字num：{context.num}</p>\n    </div>\n  );\n}\n\nexport default ChildOne;","/*\n * @Descripttion: your project\n * @Author: huangjitao\n * @Date: 2021-08-15 15:52:01\n * @Function: 该文件用途描述\n */\n\nimport { Button } from \"antd\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"./index\";\n\nfunction ChildTwo() {\n  const context = useContext(Context)\n\n  const clickHandle = () => {\n    context.setNum(context.num + 1)\n  }\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件2</h2>\n      <p>该子组件用来修改num值</p>\n      <Button onClick={clickHandle}>增加</Button>\n    </div>\n  );\n}\n\nexport default ChildTwo;","/*\n * @Descripttion: useContext的使用\n * @Author: huangjitao\n * @Date: 2021-08-15 15:42:03\n * @Function: 该文件用途描述\n */\n\nimport { Typography } from \"antd\";\nimport React, { createContext, useState } from \"react\";\nimport ChildOne from \"./ChildOne\";\nimport ChildTwo from \"./ChildTwo\";\nconst { Title, Paragraph } = Typography;\n\nexport const Context = createContext<{\n  num: number;\n  setNum: React.Dispatch<React.SetStateAction<number>>;\n}>({ num: 0, setNum: () => {} })\n\nfunction Chapter6_1() {\n  const [num, setNum] = useState(0);\n\n  return (\n    <Typography>\n      <Title level={2}>useContext的使用</Title>\n      <Paragraph>\n        useContext的作用是将该组件的状态值在所有其子组件之间实现共享。\n        以下的例子将实现将状态值和更新该状态的函数在所有子组件之间共享，已达到所以子组件可以显示同一个状态值并且可以更改该状态值。\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <Context.Provider value={{num, setNum}} >\n        <div style={{ padding: 10, border: '1px solid #000' }}>\n          <h1>父组件</h1>\n          <p>数字num：{num}</p>\n          <ChildOne />\n          <ChildTwo />\n        </div>\n      </Context.Provider>  \n    </Typography>\n  );\n}\n\nexport default Chapter6_1;\n","/*\n * @Descripttion: 子组件1\n * @Author: huangjitao\n * @Date: 2021-08-15 20:07:26\n * @Function: 6-2节的子组件\n */\n\nimport { Button } from \"antd\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"./index\";\n\nfunction ChildOne() {\n  const context = useContext(Context)\n\n  const addNum = () => {\n    context.dispatch({\n      type: 'ADD',\n    })\n  }\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件1</h2>\n      <p>数字num：{context.state.num}</p>\n      <Button onClick={addNum}>增加</Button>\n    </div>\n  );\n}\n\nexport default ChildOne;","/*\n * @Descripttion: 子组件2\n * @Author: huangjitao\n * @Date: 2021-08-15 20:16:44\n * @Function: 6-2节的子组件\n */\n\nimport { Button } from \"antd\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"./index\";\n\nfunction ChildTwo() {\n  const context = useContext(Context)\n\n  const reduceNum = () => {\n    context.dispatch({\n      type: 'REDUCE',\n    })\n  }\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件2</h2>\n      <p>数字num：{context.state.num}</p>\n      <Button onClick={reduceNum}>减少</Button>\n    </div>\n  );\n}\n\nexport default ChildTwo;","/*\n * @Descripttion: reducer\n * @Author: huangjitao\n * @Date: 2021-08-15 20:11:21\n * @Function: 该文件用途描述\n */\n\nexport type State = {\n  num: number\n}\n\nexport type Action = {\n  data?: any[];\n  type: 'ADD' | 'REDUCE';\n}\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ADD':\n      return {\n        num: state.num + 1\n      }\n    case 'REDUCE':\n      return {\n        num: state.num - 1\n      };\n    default:\n      return state\n  }\n}","/*\n * @Descripttion: useContext配合useReducer实现redux效果\n * @Author: huangjitao\n * @Date: 2021-08-15 20:02:51\n * @Function: 该文件用途描述\n */\n\nimport { Typography } from \"antd\";\nimport React, { createContext, useReducer, useState } from \"react\";\nimport ChildOne from \"./ChildOne\";\nimport ChildTwo from \"./ChildTwo\";\nimport { reducer } from \"./reducer\";\nconst { Title, Paragraph } = Typography;\n\nexport const Context = createContext<{\n  state: { num: number };\n  dispatch: React.Dispatch<React.SetStateAction<any>>;\n}>({ state: {num: 0}, dispatch: () => {} })\n\nfunction Chapter6_2() {\n  const [state, dispatch] = useReducer(reducer, { num: 0 });\n\n  return (\n    <Typography>\n      <Title level={2}>useContext配合useReducer实现redux效果</Title>\n      <Paragraph>\n        useContext的作用是将该组件的状态值在所有其子组件之间实现共享。\n        以下的例子将实现将状态值和更新该状态的函数在所有子组件之间共享，已达到所以子组件可以显示同一个状态值并且可以更改该状态值。\n      </Paragraph>\n      <Title level={3}>实例</Title>\n      <Context.Provider value={{state, dispatch}} >\n        <div style={{ padding: 10, border: '1px solid #000' }}>\n          <h1>父组件</h1>\n          <p>数字num：{state.num}</p>\n          <ChildOne />\n          <ChildTwo />\n        </div>\n      </Context.Provider>  \n    </Typography>\n  );\n}\n\nexport default Chapter6_2;\n","/*\n * @Descripttion: useRef的作用\n * @Author: huangjitao\n * @Date: 2021-08-22 11:08:38\n * @Function: 该文件用途描述\n */\n\nimport { Typography } from \"antd\";\nimport React, { useEffect, useRef, useState } from \"react\";\nconst { Title, Paragraph } = Typography;\n\nfunction Chapter7_1() {\n  const [num_1, setNum_1] = useState<number>(0);\n  let timer_1: any\n  useEffect(() => {\n    timer_1 = setInterval(() => {\n      setNum_1(num => num + 1)\n    }, 500)\n  }, [])\n  useEffect(() => {\n    if (num_1 > 10) {\n      console.log(timer_1)\n      clearInterval(timer_1)\n    }\n  }, [num_1])\n\n  const [num_2, setNum_2] = useState<number>(0);\n  const ref = useRef<any>()\n  useEffect(() => {\n    ref.current = setInterval(() => {\n      setNum_2(num => num + 1)\n    }, 500)\n  }, [])\n  useEffect(() => {\n    if (num_2 > 10) {\n      console.log(ref.current)\n      clearInterval(ref.current)\n    }\n  }, [num_2])\n\n  return (\n    <Typography>\n      <Title level={2}>useRef的作用</Title>\n      <Paragraph>\n        useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。\n        返回的 ref 对象在组件的整个生命周期内持续存在。\n        这个特性通过以下两个实例可以清楚地加以说明\n      </Paragraph>\n\n      <Title level={3}>实例1: 使用普通变量存储定时器</Title>\n      <Paragraph>\n        在页面第一次加载完毕后，设置一个定时器，该定时器的作用是定期更改num_1的值；\n        将该定时器的id赋值给在外层定义的普通变量timer_1来保存；\n        在num_1大于10的时候，将timer_1中保存的定时器id取出并清除。\n        结果并没有达到预期效果。\n      </Paragraph>\n      <p>数字1：{num_1}</p>\n\n      <Title level={3}>实例2: 使用useRef存储定时器</Title>\n      <Paragraph>\n        重复上面的例子，只是这次使用useRef定义的ref来存储定时器id。\n        结果达到了预期的效果\n      </Paragraph>\n      <p>数字2：{num_2}</p>\n    </Typography>\n  );\n}\n\nexport default Chapter7_1;\n","/*\n * @Descripttion: useRef的特性\n * @Author: huangjitao\n * @Date: 2021-08-22 11:47:30\n * @Function: 该文件用途描述\n */\n\nimport { Button, Typography } from \"antd\";\nimport React, { useRef, useState } from \"react\";\nconst { Title, Paragraph } = Typography;\n\nfunction Chapter7_2() {\n  const ref = useRef<number>(0)\n  const add = () => {\n    ref.current = ref.current + 1\n    console.log('ref', ref)\n  }\n  \n  const [refresh, setRefresh] = useState<boolean>(false)\n\n  const refreshPage = () => {\n    setRefresh(!refresh)\n  }\n\n  return (\n    <Typography>\n      <Title level={2}>useRef的特性</Title>\n      <Paragraph>\n        useRef保存的值存储在ref.current中，通过给ref.current赋值可以改变useRef保存的值。\n        但是需要注意的是，ref.current的赋值操作不会导致页面的重新渲染，这也是useRef区别于useState的地方\n      </Paragraph>\n      <Title level={2}>useRef的特性</Title>\n      <Paragraph>\n        下面一个例子使用ref存储数字，点击增加按钮使ref存储的数字加1；\n        但是每次点击增加按钮，数字并没有改变；\n        点击刷新按钮，更改了状态值refresh后，页面重新渲染，这时候显示的数字才是预期的。\n      </Paragraph>\n      <p>数字：{ref.current}</p>\n      <Button onClick={add} style={{marginRight: 15}}>增加</Button>\n      <Button onClick={refreshPage}>刷新</Button>\n    </Typography>\n  );\n}\n\nexport default Chapter7_2;","/*\n * @Descripttion: chapter8-1的子组件\n * @Author: huangjitao\n * @Date: 2021-08-22 15:51:31\n * @Function: 该文件用途描述\n */\n\nimport { Input } from \"antd\";\nimport React from \"react\";\n\nconst Child = React.forwardRef((props, ref: any) => {\n\n  return (\n    <div style={{ padding: 10, border: '1px solid #000' }}>\n      <h2>子组件</h2>\n      <Input ref={ref} />\n    </div>\n  );\n})\n\nexport default Child;\n","/*\n * @Descripttion: React.forwardRef\n * @Author: huangjitao\n * @Date: 2021-08-22 15:48:22\n * @Function: 该文件用途描述\n */\n\n\nimport { Button, Typography } from \"antd\";\nimport React  from \"react\";\nimport Child from \"./Child\";\nconst { Title, Paragraph } = Typography;\n\nfunction Chapter8_1() {\n  const ref = React.createRef<any>()\n\n  const focus = () => {\n    console.log(ref)\n    ref.current.focus()\n  }\n\n  return (\n    <Typography>\n      <Title level={2}>React.forwardRef的使用</Title>\n      <Paragraph>\n        useImperativeHandle 应当与 forwardRef 一起使用。因此首先我们来研究一下React.forwardRef的作用。\n      </Paragraph>\n      <Title level={3}>案例</Title>\n      <Paragraph>\n        定义一个子组件Child，它包裹有一个输入框Input。在父组件中定义一个按钮点击事件，在该事件中去触发子组件Child中的Input组件的focus（聚焦）事件。\n        而组件Input和父组件之间还有一个子组件Child，而React.forwardRef的作用就是在中间转发ref。\n      </Paragraph>\n      <div style={{ padding: 10, border: '1px solid #000' }}>\n        <h1>父组件</h1>\n        <Button onClick={focus} style={{ marginBottom: 15 }}>聚焦子组件Input</Button>\n        <Child ref={ref} />\n      </div>\n    </Typography>\n  );\n}\n\nexport default Chapter8_1;\n","/*\n * @Descripttion: 自定义多Tag显示组件\n * @Author: huangjitao\n * @Date: 2021-08-22 16:57:35\n * @Function: 该文件用途描述\n */\n\nimport React, { forwardRef, useImperativeHandle, useState } from \"react\"; \nimport { Tag } from \"antd\";\n\ntype Value = { id: any; label: string }[];\ninterface MultipleTagProps {\n  initialValue?: Value; // 初始值\n  onChange?: (value: Value) => void;\n}\n\nconst MultipleTag = forwardRef((props: MultipleTagProps, ref) => {\n  const { initialValue, onChange } = props;\n  const [array, setArray] = useState<Value>(initialValue || []);\n\n  // 删除标签\n  const deleteTag = (id: any) => {\n    const newArray = array.filter((item) => item.id !== id);\n    setArray(newArray);\n    onChange?.(newArray);\n  };\n\n  // 添加标签\n  const addTag = (params: Value) => {\n    const tmp = [...array];\n    params.forEach((item) => {\n      const isExit = tmp.find((thing) => thing.id === item.id);\n      if (!isExit) {\n        tmp.push(item);\n      }\n    });\n    setArray(tmp);\n    onChange?.(tmp);\n  };\n\n  // 设置标签\n  const setTag = (params: Value) => {\n    setArray(params);\n    onChange?.(params);\n  };\n\n  // 使用 ref 时自定义暴露给父组件的实例值。\n  useImperativeHandle(ref, () => ({\n    value: array,\n    addTag: (params: Value) => {\n      addTag(params);\n    },\n    setTag: (params: Value) => {\n      setTag(params);\n    }\n  }));\n\n  return (\n    <div style={{ width: 300, border: \"1px solid #000\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", minHeight: 40 }} >\n        {array.map((item) => (\n          <Tag\n            closable\n            key={item.id}\n            onClose={() => deleteTag(item.id)}\n          >\n            {item.label}\n          </Tag>\n        ))}\n    </div>\n  );\n});\n\nexport default MultipleTag;\n","/*\n * @Descripttion: useImperativeHandle的作用\n * @Author: huangjitao\n * @Date: 2021-08-22 16:44:25\n * @Function: 该文件用途描述\n */\n\n\nimport { Button, Divider, Select, Typography } from \"antd\";\nimport React, { useRef }  from \"react\";\nimport MultipleTag from \"./MultipleTag\";\nconst { Title, Paragraph } = Typography;\n\nconst dataSource = [\n  { label: \"小花\", value: 1 },\n  { label: \"小明\", value: 2 },\n  { label: \"小张\", value: 3 },\n  { label: \"老王\", value: 4 }\n]\n\nfunction Chapter8_2() {\n  const ref = useRef<any>()\n\n  // 添加标签\n  const addTag = (value: number, options: any) => {\n    const val = { label: options.label, id: options.value }\n    ref.current.addTag([val])\n  }\n\n  // 重置标签\n  const setTag = () => {\n    ref.current.setTag([{ label: \"小花\", id: 1 }])\n  }\n\n  return (\n    <Typography>\n      <Title level={2}>useImperativeHandle的作用</Title>\n      <Paragraph>\n        useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。这样大大增加了父组件获取子组件下状态和方法的便捷性。\n      </Paragraph>\n      <Title level={3}>案例</Title>\n      <Paragraph>\n        自定义一个组件MultipleTag，该组件将用来展示过个标签，并且支持添加、删除、重置标签；\n        其中删除标签的逻辑可在组件内部自行解决；\n        而添加、重置标签涉及到在父组件中调用添加、删除的方法。因此可以使用useImperativeHandle将这两个方法暴露给父组件。\n      </Paragraph>\n      <Select options={dataSource} onChange={addTag} placeholder=\"请选择要添加的标签\" style={{width: 200}}/>\n      <Button onClick={setTag} style={{marginLeft: 15}}>重置</Button>\n      <Divider />\n      <MultipleTag initialValue={[{ label: \"小花\", id: 1 }]} ref={ref}/>\n    </Typography>\n  );\n}\n\nexport default Chapter8_2;","/*\n * @Descripttion: useMemo的使用\n * @Author: huangjitao\n * @Date: 2021-08-26 14:47:39\n * @Function: use of this file\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Button, Typography } from \"antd\";\n\nconst { Title, Paragraph } = Typography\n\nfunction Chapter9_1() {\n  const [num, setNum] = useState<number>(0);\n  const [refresh, setRefresh] = useState<boolean>(false)\n\n  // const multipleNum = () => {\n  //   for (let i = 0; i < 999999999; i++) {\n  //     const element = i\n  //   }\n  //   return num * Math.floor(Math.random() * 10 + 1);\n  // }\n\n  const multipleNum = useMemo(() => {\n    // 模拟耗性能的开销\n    for (let i = 0; i < 999999999; i++) {\n      const element = i\n    }\n    return num * Math.floor(Math.random() * 10 + 1);\n  }, [num])\n\n  return (\n    <Typography>\n      <Title level={2}>useMemo的使用</Title>\n      <Paragraph>\n        useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。\n      </Paragraph>\n      <Title level={3}>案例</Title>\n      <Paragraph>\n        定义一个状态数字num将它显示在页面上，在定义另一个数字multipleNum为num的随机倍数也将它显示在页面上；\n        分别使用两种方法计算multipleNum：普通函数计算和useMemo计算。\n        发现普通函数在每次页面渲染时都会计算multipleNum，而useMemo只在依赖项（num）更新时计算multipleNum从而节省了开销。\n      </Paragraph>\n      <p>数字num: {num}</p>\n      {/* <p>多倍数字：{multipleNum()}</p> */}\n      <p>多倍数字：{multipleNum}</p>\n      <Button onClick={() => setNum(num => num + 1)} style={{ marginRight: 15 }}>增加</Button>\n      <Button onClick={() => setRefresh(!refresh)}>刷新</Button>\n    </Typography>\n  );\n}\n\nexport default Chapter9_1;\n","/*\n * @Descripttion: 菜单配置\n * @Author: huangjitao\n * @Date: 2021-08-04 20:56:55\n * @Function: 该文件用途描述\n */\n\nimport Chapter1_1 from \"../pages/chapter1-1\";\nimport Chapter1_2 from \"../pages/chapter1-2\";\nimport Chapter10_1 from \"../pages/chapter10-1\";\nimport Chapter10_2 from \"../pages/chapter10-2\";\nimport Chapter11_1 from \"../pages/chapter11-1\";\nimport Chapter11_2 from \"../pages/chapter11-2\";\nimport Chapter2_1 from \"../pages/chapter2-1\";\nimport Chapter2_2 from \"../pages/chapter2-2\";\nimport Chapter2_3 from \"../pages/chapter2-3\";\nimport Chapter2_4 from \"../pages/chapter2-4\";\nimport Chapter3_1 from \"../pages/chapter3-1\";\nimport Chapter3_2 from \"../pages/chapter3-2\";\nimport Chapter3_3 from \"../pages/chapter3-3\";\nimport Chapter3_4 from \"../pages/chapter3-4\";\nimport Chapter4_1 from \"../pages/chapter4-1\";\nimport Chapter4_2 from \"../pages/chapter4-2\";\nimport Chapter5_1 from \"../pages/chapter5_1\";\nimport Chapter5_2 from \"../pages/chapter5_2\";\nimport Chapter6_1 from \"../pages/chapter6-1\";\nimport Chapter6_2 from \"../pages/chapter6_2\";\nimport Chapter7_1 from \"../pages/chapter7-1\";\nimport Chapter7_2 from \"../pages/chapter7-2\";\nimport Chapter8_1 from \"../pages/chapter8-1\";\nimport Chapter8_2 from \"../pages/chapter8-2\";\nimport Chapter9_1 from \"../pages/chapter9-1\";\n\nexport const menu = [\n  {\n    label: \"1. React Introduce\",\n    key: \"1\",\n    children: [\n      {\n        label: \"1.1 React的特点\",\n        key: \"1-1\",\n        path: \"/abstract/feature\",\n        component: Chapter1_1,\n      },\n      {\n        label: \"1.2 React-Hook的历史\",\n        key: \"1-2\",\n        path: \"/abstract/history\",\n        component: Chapter1_2,\n      }\n    ]\n  },\n  {\n    label: \"2. useState\",\n    key: \"2\",\n    children: [\n      {\n        label: \"2.1 useState的基本用法\",\n        key: \"2-1\",\n        path: \"/useState/base\",\n        component: Chapter2_1\n      },\n      {\n        label: \"2.2 setState是同步还是异步\",\n        key: \"2-2\",\n        path: \"/useState/sync\",\n        component: Chapter2_2\n      },\n      {\n        label: \"2.3 useState的函数式更新\",\n        key: \"2-3\",\n        path: \"/useState/func-update\",\n        component: Chapter2_3\n      },\n      {\n        label: \"2.4 useState的惰性初始化\",\n        key: \"2-4\",\n        path: \"/useState/lazy\",\n        component: Chapter2_4\n      }\n    ]\n  },\n  {\n    label: \"3. useEffect\",\n    key: \"3\",\n    children: [\n      {\n        label: \"3.1 useEffect的基本用法\",\n        key: \"3-1\",\n        path: \"/useEffect/base\",\n        component: Chapter3_1\n      },\n      {\n        label: \"3.2 useEffect如何清除effect\",\n        key: \"3-2\",\n        path: \"/useEffect/clearEffect\",\n        component: Chapter3_2\n      },\n      {\n        label: \"3.3 useEffect的依赖项问题\",\n        key: \"3-3\",\n        path: \"/useEffect/dependencies\",\n        component: Chapter3_3\n      },\n      {\n        label: \"3.4 useEffect依赖项的选择\",\n        key: \"3-4\",\n        path: \"/useEffect/chooseDependencies\",\n        component: Chapter3_4\n      }\n    ]\n  },\n  {\n    label: \"4. useLayoutEffect\",\n    key: \"4\",\n    children: [\n      {\n        label: \"4.1 useLayoutEffect与useEffect的区别\",\n        key: \"4-1\",\n        path: \"/useLayoutEffect/differences\",\n        component: Chapter4_1\n      },\n      {\n        label: \"4.2 useLayoutEffect使用场景\",\n        key: \"4-2\",\n        path: \"/useLayoutEffect/whenToUse\",\n        component: Chapter4_2\n      },\n    ]\n  },\n  {\n    label: \"5. useReducer\",\n    key: \"5\",\n    children: [\n      {\n        label: \"5-1 useReducer的使用\",\n        key: \"5-1\",\n        path: \"/useReducer/use\",\n        component: Chapter5_1\n      },\n      {\n        label: \"5-2 useReducer如何dispatch函数\",\n        key: \"5-2\",\n        path: \"/useReducer/thunk\",\n        component: Chapter5_2\n      },\n    ]\n  },\n  {\n    label: \"6. useContext\",\n    key: \"6\",\n    children: [\n      {\n        label: \"6-1 useContext的使用\",\n        key: \"6-1\",\n        path: \"/useContext/use\",\n        component: Chapter6_1\n      },\n      {\n        label: \"6-2 useContext实现redux\",\n        key: \"6-2\",\n        path: \"/useContext/redux\",\n        component: Chapter6_2\n      },\n    ]\n  },\n  {\n    label: \"7. useRef\",\n    key: \"7\",\n    children: [\n      {\n        label: \"7-1 useRef的作用\",\n        key: \"7-1\",\n        path: \"/useRef/use\",\n        component: Chapter7_1\n      },\n      {\n        label: \"7-2 useRef的特性\",\n        key: \"7-2\",\n        path: \"/useRef/feature\",\n        component: Chapter7_2\n      },\n    ]\n  },\n  {\n    label: \"8. useImperativeHandle\",\n    key: \"8\",\n    children: [\n      {\n        label: \"8-1 React.forwardRef的使用\",\n        key: \"8-1\",\n        path: \"/useImperativeHandle/forwardRef\",\n        component: Chapter8_1\n      },\n      {\n        label: \"8-2 useImperativeHandle的作用\",\n        key: \"8-2\",\n        path: \"/useImperativeHandle/use\",\n        component: Chapter8_2\n      },\n    ]\n  },\n  {\n    label: \"9. useMemo\",\n    key: \"9\",\n    children: [\n      {\n        label: \"9-1 useMemo的使用\",\n        key: \"9-1\",\n        path: \"/useMemo/use\",\n        component: Chapter9_1\n      },\n    ]\n  },\n  {\n    label: \"10. useCallback\",\n    key: \"10\",\n    children: [\n      {\n        label: \"10-1 useCallback的作用\",\n        key: \"10-1\",\n        path: \"/useCallback/use\",\n        component: Chapter10_1\n      },\n      {\n        label: \"10-2 useCallback的优化\",\n        key: \"10-2\",\n        path: \"/useCallback/optimize\",\n        component: Chapter10_2\n      },\n    ]\n  },\n  {\n    label: \"11. custom hook\",\n    key: \"11\",\n    children: [\n      {\n        label: \"11-1 自定义一个useArray hook\",\n        key: \"11-1\",\n        path: \"/custom_hook/useArray\",\n        component: Chapter11_1\n      },\n      {\n        label: \"11-2 使用自定义hook封装重复代码\",\n        key: \"11-2\",\n        path: \"/custom_hook/useQuery\",\n        component: Chapter11_2\n      },\n    ]\n  }\n]","/*\n * @Descripttion: 选中的菜单的相关信息\n * @Author: huangjitao\n * @Date: 2021-08-04 21:35:38\n * @Function: 该文件用途描述\n */\n\nimport { useEffect } from \"react\"\nimport { useLocation } from \"react-router\"\nimport { useImmer } from \"use-immer\"\nimport { menu } from \"../consts/menu\"\n\ninterface StateProps {\n  selectedKeys: string[];\n  openKeys: string[];\n  title: string\n}\n\nexport const useSelectedMenu = () => {\n  const [state, setState] = useImmer<StateProps>({\n    selectedKeys: [],\n    openKeys: [],\n    title: ''\n  })\n  const {pathname} = useLocation()\n\n  useEffect(() => {\n    menu.forEach(item => {\n      item.children.forEach(child => {\n        if (child.path === pathname) {\n          setState(state => {\n            state.openKeys = [item.key]\n            state.selectedKeys = [child.key]\n            state.title = child.label\n          })\n        }\n      })\n    })\n  }, [pathname])\n\n  return {\n    selectedKeys: state.selectedKeys,\n    openKeys: state.openKeys,\n    title: state.title\n  }\n}","/*\n * @Descripttion: 右侧导航栏\n * @Author: huangjitao\n * @Date: 2021-08-04 21:14:56\n * @Function: 该文件用途描述\n */\n\nimport { Menu } from \"antd\";\nimport { menu } from \"../consts/menu\";\nimport { Link } from \"react-router-dom\";\nimport { useSelectedMenu } from \"../utils/useSelectedMenu\";\n\nconst { SubMenu } = Menu;\n\nconst SideMenu = () => {\n  const { selectedKeys, openKeys } = useSelectedMenu();\n  return (\n    <Menu\n      style={{ width: \"100%\", height: \"100%\" }}\n      selectedKeys={selectedKeys}\n      // openKeys={openKeys}\n      mode=\"inline\"\n    >\n      {menu.map((item) => (\n        <SubMenu key={item.key} title={item.label}>\n          {item.children.map((child) => (\n            <Menu.Item key={child.key}>\n              <Link to={child.path} key={child.path}>{child.label}</Link>\n            </Menu.Item>\n          ))}\n        </SubMenu>\n      ))}\n    </Menu>\n  );\n};\n\nexport default SideMenu;\n","/*\n * @Descripttion: 页面通用头部组件\n * @Date: 2021-08-04 22:09:56\n * @Function: 该文件用途描述\n */\n\nimport { useSelectedMenu } from \"../utils/useSelectedMenu\";\n\nconst PageHeader = () => {\n  const { title } = useSelectedMenu();\n  return (\n    <div style={{ marginLeft: 25 }}>\n      <h1 style={{ color: \"#fff\" }}>{title}</h1>\n    </div>\n  );\n};\n\nexport default PageHeader;\n","/*\n * @Descripttion: 应用主入口\n * @Author: huangjitao\n * @Date: 2021-08-04 20:27:49\n * @Function: 该文件用途描述\n */\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Layout } from \"antd\";\nimport SideMenu from \"./components/SideMunu\";\nimport { HashRouter, Navigate, Route, Routes } from \"react-router-dom\";\nimport { menu } from \"./consts/menu\";\nimport PageHeader from \"./components/PageHeader\";\n\nconst { Sider, Header, Content, Footer } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const onCollapse = () => {\n    setCollapsed(!collapsed);\n  };\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Layout style={{ height: \"100%\" }}>\n          <Sider\n            width={256}\n            collapsible\n            collapsed={collapsed}\n            onCollapse={onCollapse}\n          >\n            <SideMenu />\n          </Sider>\n          <Layout>\n            <Header>\n              <PageHeader />\n            </Header>\n            <Content\n              style={{\n                // display: \"flex\",\n                // justifyContent: \"center\",\n                padding: \"50px\",\n                overflow: \"auto\",\n              }}\n            >\n              <Routes>\n                {menu.map((item) => {\n                  if (item.children) {\n                    return item.children.map((child) => (\n                      <Route path={child.path} element={<child.component />} />\n                    ));\n                  }\n                })}\n                <Navigate to={\"/abstract/feature\"} />\n              </Routes>\n            </Content>\n          </Layout>\n        </Layout>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Descripttion: \n * @Author: huangjitao\n * @Date: 2021-08-04 20:27:49\n * @Function: 该文件用途描述\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}